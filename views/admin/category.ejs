
<div class="flex h-screen">
<%- include('../partials/admin/header') %>  <!-- Include header from partials -->
<style>
  /* Hide modal by default */
  #addCategoryModal {
    display: none;
  }
</style>
<main class="flex-1">
<div class="flex-1 px-6 mt-6">
  <div class=" mx-7 flex items-center justify-between">
    <nav class="text-sm text-gray-500">
      <a href="#" class="hover:text-yellow-500">Dashboard</a> >
      <a href="#" class="text-gray-800">Category</a>
    </nav>      
  </div>


<div class="flex-1">
  <!-- Sidebar -->

  <!-- Main content area -->
  <div class="flex-1 p-3">
    <!-- Title and button row -->
    <div class=" flex items-center justify-between">
      <h1 class="text-xl font-bold text-gray-800">Category Management</h1>
      <button onclick="openModal()" class="px-4 py-2 text-white bg-yellow-500 rounded hover:bg-yellow-600">
        Add Category
      </button>
    </div>
  
<div id="errorMessage" style="display: none; position: fixed; top: 10px; left: 50%; transform: translateX(-50%); background-color: #f44336; color: white; padding: 10px; border-radius: 5px; font-size: 14px; z-index: 1000; max-width: 300px;">
  <!-- Error message will appear here -->
</div>

<div id="successMessage" style="display: none; position: fixed; top: 10px; left: 50%; transform: translateX(-50%); background-color: #4CAF50; color: white; padding: 10px; border-radius: 5px; font-size: 14px; z-index: 1000; max-width: 300px;">
  <!-- Success message will appear here -->
</div>
  

    <!-- Search Bar and Dropdown Filters -->
    <div class="mb-4 flex items-center justify-between flex-wrap gap-4">
      <!-- Search Bar -->
      <input 
      type="text" 
      id="searchBar" 
      placeholder="Search categories by name..." 
      class="w-full md:w-1/2 p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
    />
    
    
      <!-- Dropdown Filter -->
      <div class="relative" style="display: none;">
        <select id="filterDropdown" onchange="filterCategories(this.value)" 
          class="p-3 w-full md:w-48 text-gray-700  border border-yellow-500 rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500">
          <option value="All">All</option>
          <option value="Men">Men</option>
          <option value="Women">Women</option>
        </select>
      </div>
    </div>

    <!-- Table and Other Content -->
    <div class="overflow-x-auto bg-white rounded-lg shadow">
      <table class="w-full text-left border-collapse">
        <thead class="bg-yellow-100 border-b-2 border-yellow-500">
          <tr>
            <th class="p-4">no.</th>
            <th class="p-4">Name</th>
            <th class="p-4">Description</th>
            <th class="p-4">Gender</th>
            <th class="p-4">Status</th>
            <th class="p-4">Actions</th>
          </tr>
        </thead>
        <tbody id="categoryTable">
          <% if ( categoryData.length > 0) { %>
            <%  categoryData.forEach((category, index) => { %>
              <tr class="border-b hover:bg-yellow-50">
                <td class="p-4"><%= (currentPage - 1) * 5 + index + 1 %></td>
                <td class="p-4"><%= category.name %></td>
                <td class="p-4"><%= category.description %></td>
                <td class="p-4"><%= category.gender %></td>
                <td class="p-4">
                  <% if (category.isListed) { %>
                    <button class="w-24 h-10 text-white bg-green-500 rounded" onclick="confirmBlock('/admin/listCategory?id=<%= category._id %>')">
                      Block
                    </button>
                  <% } else { %>
                    <button class="w-24 h-10 text-white bg-red-500 rounded" onclick="confirmUnblock('/admin/unlistCategory?id=<%= category._id %>')">
                      Unblock
                    </button>
                  <% } %>
                </td>
                  <td class="p-4">
                    <button class="px-3 py-1 text-white bg-blue-500 rounded hover:bg-blue-600" onclick="openEditModal('<%= category._id %>', '<%= category.name %>', '<%= category.description %>', '<%= category.gender %>')">
                      Edit
                    </button>
                  </td>
              </tr>
            <% }) %>
          <% } else { %>
            <tr>
              <td colspan="5" class="text-center p-4">No categories found</td>
            </tr>
          <% } %>
        </tbody>
        
        
      </table>
    </div>
   
    <div class="flex items-center justify-center mt-4 space-x-2">
      <!-- Previous Button -->
      <a 
        href="?page=<%= currentPage > 1 ? currentPage - 1 : 1 %>" 
        class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= currentPage === 1 ? 'cursor-not-allowed opacity-50' : '' %>">
        &laquo;
      </a>
    
      <!-- Page Numbers -->
      <% for (let i = 1; i <= totalPages; i++) { %>
        <a 
          href="?page=<%= i %>" 
          class="px-4 py-2 rounded <%= currentPage === i ? 'bg-yellow-500 text-white hover:bg-yellow-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300' %>">
          <%= i %>
        </a>
      <% } %>
    
      <!-- Next Button -->
      <a 
        href="?page=<%= currentPage < totalPages ? currentPage + 1 : totalPages %>" 
        class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= currentPage === totalPages ? 'cursor-not-allowed opacity-50' : '' %>">
        &raquo;
      </a>
    </div>

  </div>
</div>

<!-- Add Category Modal -->
<div id="addCategoryModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
  <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
    <h2 class="text-xl font-bold text-yellow-500 mb-4">Add Category</h2>
    
    <!-- Form -->
    <form method="post" action="/admin/addCategory" id="addCategoryForm" onsubmit="return handleFormSubmit(event)">
      <div class="mb-4">
        <label for="Name" class="block text-gray-700 font-medium">Category Name</label>
        <input type="text" id="Name" placeholder="Enter category name" 
          class="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500">
          <div id="name-error" class="error-message"></div>
      </div>
      <div class="mb-4">
        <label for="Description" class="block text-gray-700 font-medium">Description</label>
        <textarea id="Description" placeholder="Enter description" rows="3" 
          class="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"></textarea>
          <div id="description-error" class="error-message"></div>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 font-medium">Gender</label>
        <div class="flex space-x-4">
          <label>
            <input type="radio" name="gender" value="Men" class="mr-2"> Men
          </label>
          <label>
            <input type="radio" name="gender" value="Women" class="mr-2"> Women
          </label>
          <div id="gender-error" class="error-message"></div>
        </div>
      </div>
      <div class="flex justify-end">
        <button type="button" onclick="closeModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
          Cancel
        </button>
        <button type="submit" class="ml-3 px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600">
          Submit
        </button>
      </div>
    </form>
  </div>
</div>
</main>
</div>

<!-- edit category modal -->
 <!-- Add Category Modal (for editing) -->
<div id="editCategoryModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50" style="display: none;">
  <div class="bg-white p-6 rounded-lg shadow-lg w-full max-w-md">
    <h2 class="text-xl font-bold text-yellow-500 mb-4">Edit Category</h2>
    
    <!-- Form -->
    <form method="post" action="/admin/editCategory" id="editCategoryForm" onsubmit="return handleEditFormSubmit(event)">
      <input type="hidden" id="categoryId" name="categoryId" />
      <div class="mb-4">
        <label for="editName" class="block text-gray-700 font-medium">Category Name</label>
        <input type="text" id="editName" name="name" placeholder="Enter category name" 
          class="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500">
          <div id="name-error" class="error-message"></div>
      </div>
      <div class="mb-4">
        <label for="editDescription" class="block text-gray-700 font-medium">Description</label>
        <textarea id="editDescription" name="description" placeholder="Enter description" rows="3" 
          class="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"></textarea>
          <div id="description-error" class="error-message"></div>
      </div>
      <div class="mb-4">
        <label class="block text-gray-700 font-medium">Gender</label>
        <div class="flex space-x-4">
          <label>
            <input type="radio" name="gender" value="Men" class="mr-2" id="editMen"> Men
          </label>
          <label>
            <input type="radio" name="gender" value="Women" class="mr-2" id="editWomen"> Women
          </label>
        </div>
      </div>
      <div class="flex justify-end">
        <button type="button" onclick="closeEditModal()" class="px-4 py-2 bg-gray-200 text-gray-800 rounded hover:bg-gray-300">
          Cancel
        </button>
        <button type="submit" class="ml-3 px-4 py-2 bg-yellow-500 text-white rounded hover:bg-yellow-600">
          Update
        </button>
      </div>
    </form>
  </div>
</div>

  <script>



window.onload = function() {
    const savedFilter = localStorage.getItem('selectedGender');
    if (savedFilter) {
      document.getElementById('filterDropdown').value = savedFilter;
      filterCategories(); // Apply the saved filter when the page loads
    }
  }

    // Open modal
    function openModal() {
      document.getElementById('addCategoryModal').style.display = 'flex';
    }

    // Close modal
    function closeModal() {
      document.getElementById('addCategoryModal').style.display = 'none';
      resetForm();
    }


   // Function to reset all form fields inside the modal
function resetForm() {
  const form = document.getElementById('addCategoryForm');
  form.reset(); // Reset all input fields to default (empty)

  // Clear error messages if any
  document.getElementById('name-error').textContent = '';
  document.getElementById('description-error').textContent = '';
  document.getElementById('gender-error').textContent = '';
}


  // Filter categories by gender
  function filterCategories() {
    const genderFilter = document.getElementById('filterDropdown').value;

    // Save the selected filter to localStorage
    localStorage.setItem('selectedGender', genderFilter);

    const rows = document.querySelectorAll('#categoryTable tr');

    rows.forEach(row => {
      const gender = row.cells[3].textContent.trim(); // Get gender from the row

      // If the filter is 'All', show all rows, otherwise show rows matching the selected gender
      if (genderFilter === 'All' || gender === genderFilter) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  }


    function handleFormSubmit(event) {
  event.preventDefault();

  // Perform validation
  if (!validateForm()) {
    return; // Stop if validation fails
  }

  const name = document.getElementById("Name").value.trim();
  const description = document.getElementById("Description").value.trim();
  const genderElement = document.querySelector('input[name="gender"]:checked');
  const gender = genderElement ? genderElement.value : null;

  fetch('/admin/addCategory', {
    method: 'POST',
    headers: {
      'content-type': 'application/json',
    },
    body: JSON.stringify({ name, description, gender }),
  })
    .then((response) => {
      if (!response.ok) {
        return response.json().then((err) => {
          throw new Error(err.error); // Pass backend error
        });
      }
      return response.json();
    })
    .then((data) => {
    // Success SweetAlert
    Swal.fire({
      icon: 'success',
      title: 'Success',
      text: data.message || 'Category added successfully', // Use backend message
    }).then(() => {
      location.reload(); // Reload the page after the alert
    });
  })
   
  .catch((error) => {
    // Error SweetAlert
    Swal.fire({
      icon: 'error',
      title: 'Oops',
      text: error.message || 'An error occurred',
    });
  });
}



    function validateForm() {
      clearErrorMessage();
      const name = document.getElementById("Name").value.trim(); 
      const description = document.getElementById("Description").value.trim(); 
      const gender = document.querySelector('input[name="gender"]:checked');
      let isValid = true;

      // Name validations
      if (!name) {
        displayErrorMessage("name-error", "Name is required");
        isValid = false;
      } else if (name.length < 3) {
        displayErrorMessage("name-error", "Name must be at least 3 characters long");
        isValid = false;
      } else if (name.length > 20) {
        displayErrorMessage("name-error", "Name cannot exceed 20 characters");
        isValid = false;
      } else if(!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
        isValid = false;
      }

      // Description validations
      if (!description) {
        displayErrorMessage("description-error", "Description is required");
        isValid = false;
      } else if (description.length < 5) {
        displayErrorMessage("description-error", "Description must be at least 5 characters long");
        isValid = false;
      } else if (description.length > 50) {
        displayErrorMessage("description-error", "Description cannot exceed 50 characters");
        isValid = false;
      }

      // Gender validation
      if (!gender) {
        displayErrorMessage("gender-error", "Please select a gender");
        isValid = false;
      }

      return isValid;
    }


    function displayErrorMessage(elementId, message) {
  const errorElement = document.getElementById(elementId);
  if (errorElement) {
    errorElement.innerHTML = message;
    errorElement.style.color = "red"; // Customizing the error text color
    errorElement.style.display = "block";
  }
}

        function clearErrorMessage(){
           const errorElements = document.getElementsByClassName("error-message");
           Array.from(errorElements).forEach((element)=>{
             element.innerText="";
             element.style.display="none"
           });
        }
  
      // Function to escape special characters in the search query
function escapeRegex(string) {
  return string.replace(/[.*+?^=!:${}()|\[\]\/\\]/g, '\\$&');  
}

document.getElementById('searchBar').addEventListener('input', function () {
  const searchValue = this.value.trim();  // Get the search term
  const escapedSearchValue = escapeRegex(searchValue);  
  
  // Use the Fetch API to send the escaped search query to the server
  fetch(`/admin/category?search=${encodeURIComponent(escapedSearchValue)}&page=1`)
    .then(response => response.text())  // Get the response as HTML
    .then(html => {
      // Parse the new HTML and update the table body with the new data
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      const newTableBody = doc.querySelector('#categoryTable').innerHTML;
      document.querySelector('#categoryTable').innerHTML = newTableBody;  
    })
    .catch(error => console.error('Error fetching search results:', error));
});

// Open the edit modal and fill in the current data
function openEditModal(id, name, description, gender) {


  document.getElementById('editCategoryModal').style.display = 'flex';
  
  // Ensure you're setting the ID in a hidden input field
  document.getElementById('categoryId').value = id;
  document.getElementById('editName').value = name;
  document.getElementById('editDescription').value = description;
  
  // Set the gender radio button based on the current gender
  const menRadio = document.getElementById('editMen');
  const womenRadio = document.getElementById('editWomen');
  
  if (gender === 'Men') {
    menRadio.checked = true;
  } else {
    womenRadio.checked = true;
  }
}


// edit categoty
document.getElementById('updateButton').addEventListener('click', function() {
  if (!validateEditForm()) {
    return;
  }

  const categoryId = document.getElementById('categoryId').value;
  const categoryName = document.getElementById('editName').value.trim();
  const categoryDescription = document.getElementById('editDescription').value.trim();
  const categoryGender = document.querySelector('input[name="gender"]:checked').value;

  const updatedCategory = {
    categoryId: categoryId,
    name: categoryName,
    description: categoryDescription,
    gender: categoryGender
  };

  fetch('/admin/editCategory', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedCategory),
    redirect: 'manual', 
  })
  .then(response => {
    if (response.ok) {
      return response.json(); 
    } else {
      return response.json().then(err => {
        throw new Error(err.message || 'Error updating category');
      });
    }
  })
  .then(data => {
    if (data.success) {
      showMessage(data.message, 'success');
    } else {
      showMessage(data.message, 'error');
    }
  })
  .catch(error => {
    showMessage(error.message, 'error');
  });
});
function showMessage(message, type) {
  const messageDiv = type === 'error' ? document.getElementById('errorMessage') : document.getElementById('successMessage');
  messageDiv.textContent = message;
  messageDiv.style.display = 'block';
  setTimeout(() => {
    messageDiv.style.display = 'none';
  }, 5000);
}

function closeModal() {
  document.getElementById('addCategoryModal').style.display = 'none';
  resetForm();
}

function handleEditFormSubmit(event) {
  event.preventDefault();

  const formData = {
    categoryId: document.getElementById('categoryId').value,
    name: document.getElementById('editName').value,
    description: document.getElementById('editDescription').value,
    gender: document.querySelector('input[name="gender"]:checked').value
  };

  fetch('/admin/editCategory', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(formData)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      // Show success message
      Swal.fire({
        icon: 'success',
        title: 'Success',
        text: data.message,
        timer: 1500,
        showConfirmButton: false
      }).then(() => {
        // Redirect after showing message
        window.location.href = data.redirectUrl;
      });
    } else {
      // Show error message
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: data.message
      });
    }
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire({
      icon: 'error',
      title: 'Error',
      text: 'An unexpected error occurred'
    });
  });

  // Close the modal
  document.getElementById('editCategoryModal').style.display = 'none';
  return false;
}

// Add these functions for block/unblock confirmation
function confirmBlock(url) {
  Swal.fire({
    title: 'Are you sure?',
    text: "Do you want to block this category?",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, block it!',
    cancelButtonText: 'Cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      window.location.href = url;
    }
  });
}

function confirmUnblock(url) {
  Swal.fire({
    title: 'Are you sure?',
    text: "Do you want to unblock this category?",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#d33',
    confirmButtonText: 'Yes, unblock it!',
    cancelButtonText: 'Cancel'
  }).then((result) => {
    if (result.isConfirmed) {
      window.location.href = url;
    }
  });
}

// Add this function to close the edit modal
function closeEditModal() {
  document.getElementById('editCategoryModal').style.display = 'none';
}

// Edit form validation
function validateEditForm() {
  clearErrorMessage();
  const name = document.getElementById("editName").value.trim(); 
  const description = document.getElementById("editDescription").value.trim(); 
  const gender = document.querySelector('input[name="editGender"]:checked');
  let isValid = true;

  // Name validations
  if (!name) {
    displayErrorMessage("edit-name-error", "Name is required");
    isValid = false;
  } else if (name.length < 3) {
    displayErrorMessage("edit-name-error", "Name must be at least 3 characters long");
    isValid = false;
  } else if (name.length > 20) {
    displayErrorMessage("edit-name-error", "Name cannot exceed 20 characters");
    isValid = false;
  } else if(!/^[a-zA-Z\s]+$/.test(name)) {
    displayErrorMessage("edit-name-error", "Category name should contain only alphabetic characters");
    isValid = false;
  }

  // Description validations
  if (!description) {
    displayErrorMessage("edit-description-error", "Description is required");
    isValid = false;
  } else if (description.length < 5) {
    displayErrorMessage("edit-description-error", "Description must be at least 5 characters long");
    isValid = false;
  } else if (description.length > 50) {
    displayErrorMessage("edit-description-error", "Description cannot exceed 50 characters");
    isValid = false;
  }

  // Gender validation
  if (!gender) {
    displayErrorMessage("edit-gender-error", "Please select a gender");
    isValid = false;
  }

  return isValid;
}

// Helper functions
function displayErrorMessage(elementId, message) {
  const errorElement = document.getElementById(elementId);
  if (errorElement) {
    errorElement.innerHTML = message;
    errorElement.style.color = "red";
    errorElement.style.fontSize = "12px";
    errorElement.style.marginTop = "4px";
    errorElement.style.display = "block";
  }
}

function clearErrorMessage() {
  const errorElements = document.getElementsByClassName("error-message");
  Array.from(errorElements).forEach((element) => {
    element.innerText = "";
    element.style.display = "none";
  });
}

// Add real-time validation for character count
document.getElementById("Name").addEventListener("input", function() {
  const charCount = this.value.length;
  const remainingChars = 20 - charCount;
  const errorElement = document.getElementById("name-error");
  
  if (charCount > 20) {
    errorElement.innerHTML = `Character limit exceeded by ${charCount - 20} characters`;
    errorElement.style.color = "red";
    errorElement.style.display = "block";
  } else {
    errorElement.innerHTML = `${remainingChars} characters remaining`;
    errorElement.style.color = "gray";
    errorElement.style.display = "block";
  }
});

document.getElementById("Description").addEventListener("input", function() {
  const charCount = this.value.length;
  const remainingChars = 50 - charCount;
  const errorElement = document.getElementById("description-error");
  
  if (charCount > 50) {
    errorElement.innerHTML = `Character limit exceeded by ${charCount - 50} characters`;
    errorElement.style.color = "red";
    errorElement.style.display = "block";
  } else {
    errorElement.innerHTML = `${remainingChars} characters remaining`;
    errorElement.style.color = "gray";
    errorElement.style.display = "block";
  }
});

// Same real-time validation for edit form
document.getElementById("editName").addEventListener("input", function() {
  const charCount = this.value.length;
  const remainingChars = 20 - charCount;
  const errorElement = document.getElementById("edit-name-error");
  
  if (charCount > 20) {
    errorElement.innerHTML = `Character limit exceeded by ${charCount - 20} characters`;
    errorElement.style.color = "red";
    errorElement.style.display = "block";
  } else {
    errorElement.innerHTML = `${remainingChars} characters remaining`;
    errorElement.style.color = "gray";
    errorElement.style.display = "block";
  }
});

document.getElementById("editDescription").addEventListener("input", function() {
  const charCount = this.value.length;
  const remainingChars = 50 - charCount;
  const errorElement = document.getElementById("edit-description-error");
  
  if (charCount > 50) {
    errorElement.innerHTML = `Character limit exceeded by ${charCount - 50} characters`;
    errorElement.style.color = "red";
    errorElement.style.display = "block";
  } else {
    errorElement.innerHTML = `${remainingChars} characters remaining`;
    errorElement.style.color = "gray";
    errorElement.style.display = "block";
  }
});

  </script>

</div>
 
<%- include('../partials/admin/footer') %> 