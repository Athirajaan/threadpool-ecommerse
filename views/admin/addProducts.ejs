<div class="flex h-screen">
<%- include('../partials/admin/header') %> 
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
 <main class="flex-1">
   <div class="flex-1 px-6 mt-0">
    <!-- Breadcrumbs -->
    <nav class="text-sm mx-7 my-4 mt-8">
      <ol class="list-none p-0 inline-flex">
        <li class="flex items-center">
          <a href="/admin/dashboard" class="text-gray-600 hover:text-yellow-500">Home</a>
          <span class="mx-2 text-gray-500">&gt;</span>
        </li>
        <li class="flex items-center">
          <a href="/admin/products" class="text-gray-600 hover:text-yellow-500">All Products</a>
          <span class="mx-2 text-gray-500">&gt;</span>
        </li>
        <li class="flex items-center">
          <span class="text-gray-800">Add Products</span>
        </li>
      </ol>
    </nav>

    <!-- Page Header -->
    <div class="mb-1">
      <div class="flex items-center justify-between">
        <div>
         <h2 class="text-xl font-bold mx-8">Add Products</h2>
        </div>
       
      </div>
      <div class="h-px bg-gray-200"></div>
    </div>

    <!-- Add Product Form -->
    <div class="w-full max-w-6xl mx-auto bg-white rounded-xl shadow-xl p-8 grid grid-cols-1 md:grid-cols-2 gap-12">

      <!-- Left Side -->
      <div class="space-y-6">
        <form method="post" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm(event)">
        <!-- Product Name -->
        <div class="mb-6">
          <label class="block text-sm font-semibold text-gray-700 mb-2">Product Name</label>
          <input
            type="text"
            id="productName"
            placeholder="Enter product name"
            class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 transition-all"
          />
          <div id="productName-error" class="text-red-500 text-sm mt-1 error-message"></div>
        </div>
  
        <!-- Gender Selection -->
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-600">Select Gender</label>
          <select id="gender" class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-yellow-400">
            <option value="">Choose...</option>
            <option value="Men">Men</option>
            <option value="Women">Women</option>
          </select>
          <div id="gender-error" class="text-red-500 text-sm mt-1 error-message"></div>
        </div>
  
        <!-- category -->
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-600">Category</label>
          <select id="category" class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-yellow-400" disabled>
            <option value="" disabled selected>Choose category...</option>
          </select>
          <div id="category-error" class="text-red-500 text-sm mt-1 error-message"></div>
        </div>
      
  
        <!-- Description -->
        <div class="mb-4">
          <label class="block text-sm font-medium text-gray-600">Description</label>
          <textarea
            id="description"
            rows="3"
            class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-yellow-400"
            placeholder="Write a compelling description..."
          ></textarea>
          <div id="description-error" class="text-red-500 text-sm mt-1 error-message"></div>
        </div>
  
        <!-- Pricing Section -->
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
          <div>
            <label class="block text-sm font-medium text-gray-600">Regular Price</label>
            <input
              type="number"
              id="regularPrice"
              placeholder="0.00"
              class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-yellow-400"
            />
            <div id="regularPrice-error" class="text-red-500 text-sm mt-1 error-message"></div>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-600">Sale Price</label>
            <input
              type="number"
              id="salePrice"
              placeholder="0.00"
              class="w-full border border-gray-300 rounded-lg p-3 focus:ring-2 focus:ring-yellow-400"
            />
            <div id="salePrice-error" class="text-red-500 text-sm mt-1 error-message"></div>
          </div>
        </div>
  
        <!-- Size Variants -->
        <div class="mb-6">
          <label class="block text-sm font-semibold text-gray-700 mb-3">Size Variants</label>
          <div class="grid grid-cols-2 sm:grid-cols-4 gap-6">
            <!-- Size Fields  S-->
            <div class="bg-gray-50 p-4 rounded-lg">
              <label class="block text-sm font-medium text-gray-700 mb-2">S</label>
              <input
                type="number"
                id="sizeSQty"
                placeholder="Qty"
                class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 transition-all"
              />
              <div id="sizeSQty-error" class="text-red-500 text-sm mt-1 error-message"></div>
            </div>
            <!-- M -->
            <div class="bg-gray-50 p-4 rounded-lg">
              <label class="block text-sm font-medium text-gray-700 mb-2">M</label>
              <input
                type="number"
                id="sizeMQty"
                placeholder="Qty"
                class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 transition-all"
              />
              <div id="sizeMQty-error" class="text-red-500 text-sm mt-1 error-message"></div>
            </div>

            <!-- L -->
            <div class="bg-gray-50 p-4 rounded-lg">
              <label class="block text-sm font-medium text-gray-700 mb-2">L</label>
              <input
                type="number"
                id="sizeLQty"
                placeholder="Qty"
                class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 transition-all"
              />
              <div id="sizeLQty-error" class="text-red-500 text-sm mt-1 error-message"></div>
            </div>
            <!-- XL -->
            <div class="bg-gray-50 p-4 rounded-lg">
              <label class="block text-sm font-medium text-gray-700 mb-2">XL</label>
              <input
                type="number"
                id="sizeXLQty"
                placeholder="Qty"
                class="w-full border border-gray-300 rounded-lg p-2 focus:ring-2 focus:ring-yellow-400 focus:border-yellow-400 transition-all"
              />
              <div id="sizeXLQty-error" class="text-red-500 text-sm mt-1 error-message"></div>
            </div>
         
          </div>
        </div>
      </div>
 
  
      <!-- Uploaded Images Section -->
      <div class="bg-gray-50 rounded-xl p-6">
        <!-- File Input -->
        <div class="border-2 border-dashed border-gray-300 rounded-xl p-8 hover:border-yellow-400 transition-colors">
          <input type="file" id="imageInput" class="hidden" accept="image/*" multiple />
          <label for="imageInput" class="cursor-pointer flex flex-col items-center">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-10 w-10 text-gray-400"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M3 15a4 4 0 11.88-7.9m6.12 0A4 4 0 1115 15m6-2v6m0 0H9m12 0l-3-3m0 0l-3 3"
              />
            </svg>
            <p class="mt-2 text-sm font-medium">Drop your images here, or <span class="text-blue-500">browse</span></p>
            <p class="text-xs">JPEG, PNG files are allowed</p>
          </label>
        </div>
        <div id="imageInput-error" class="text-red-500 text-sm mt-1 error-message"></div>
       
         <!-- Cropping Modal -->
        <div id="cropModal" class="hidden fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50">
          <div class="bg-white rounded-lg shadow-xl" style="width: 450px;">
            <div class="p-3">
              <div class="h-[300px]">
                <img id="cropImage" src="" alt="Image to crop" class="max-w-full">
              </div>
              <div class="flex justify-end gap-2 mt-3">
                <button id="cropCancel" class="px-3 py-1.5 bg-gray-200 text-gray-800 text-sm rounded">Cancel</button>
                <button id="cropConfirm" class="px-3 py-1.5 bg-blue-500 text-white text-sm rounded">Crop</button>
              </div>
            </div>
          </div>
        </div>
        <!-- Uploaded Images Section -->
        <div id="imagePreview" class="mt-6 space-y-4"></div>
        <div class="mt-8">
          <button
            type="submit"
            id="submitButton"
            class="w-full bg-yellow-500 text-white font-bold py-4 rounded-xl shadow-lg hover:bg-yellow-600 transform hover:scale-[1.02] transition-all duration-200"
          >
            Submit Product
          </button>
        </div>
      </form>
      </div>
    </div>
  </div>
</main>
</div>
      
      <!-- JavaScript -->
      <script>

document.querySelector('form').addEventListener('submit', function(event) {
    event.preventDefault();
    // Validate the form
    if (validateForm(event)) {
        // Create a FormData object
        const formData = new FormData();

        // Append all form fields with proper error checking
        try {
            // Basic product details
            const productName = document.getElementById('productName').value.trim();
            const description = document.getElementById('description').value.trim();
            const gender = document.getElementById('gender').value;
            const category = document.getElementById('category').value;
            const regularPrice = document.getElementById('regularPrice').value;
            const salePrice = document.getElementById('salePrice').value;

            // Validate required fields
            if (!productName || !description || !gender || !category || !regularPrice || !salePrice) {
                throw new Error('Please fill in all required fields');
            }

            formData.append('productName', productName);
            formData.append('description', description);
            formData.append('gender', gender);
            formData.append('category', category);
            formData.append('regularPrice', regularPrice);
            formData.append('salePrice', salePrice);

            // Size quantities
            formData.append('sizeSQty', document.getElementById('sizeSQty').value || '0');
            formData.append('sizeMQty', document.getElementById('sizeMQty').value || '0');
            formData.append('sizeLQty', document.getElementById('sizeLQty').value || '0');
            formData.append('sizeXLQty', document.getElementById('sizeXLQty').value || '0');

            // Validate images
            if (!imageFiles || imageFiles.length < 3 || imageFiles.length > 5) {
                throw new Error('Please upload between 3 and 5 images');
            }

            // Append images with proper naming
            imageFiles.forEach((file, index) => {
                formData.append('images', file, `image-${index}.png`);
            });

            // Show loading state
            Swal.fire({
                title: 'Adding Product...',
                text: 'Please wait while we process your request',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            // Submit the form
            fetch('/admin/addProducts', {
                method: 'POST',
                body: formData
            })
            .then(async response => {
                const contentType = response.headers.get("content-type");
                if (!response.ok) {
                    if (contentType && contentType.indexOf("application/json") !== -1) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Server error occurred');
                    } else {
                        const errorText = await response.text();
                        console.error('Server Response:', errorText);
                        throw new Error('Server error: Invalid response format');
                    }
                }
                
                if (!contentType || contentType.indexOf("application/json") === -1) {
                    throw new Error('Invalid response format from server');
                }
                
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        text: 'Product added successfully',
                        timer: 1500
                    }).then(() => {
                        window.location.href = data.redirectUrl || '/admin/products';
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: data.message || 'Failed to add product'
                    });
                }
            })
            .catch(error => {
                console.error('Submission Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Submission Error',
                    text: error.message || 'There was a problem submitting the form. Please check your inputs and try again.'
                });
            });

        } catch (error) {
            console.error('Form Processing Error:', error);
            Swal.fire({
                icon: 'error',
                title: 'Form Error',
                text: error.message || 'Please check your inputs and try again'
            });
        }
    }
});

function validateForm(event) {
    clearErrorMessages();
    
    // Flag to track overall form validity
    let isValid = true;

    // Get form values
    const productName = document.getElementById('productName').value.trim();
    const gender = document.getElementById('gender').value;
    const category = document.getElementById('category').value;
    const description = document.getElementById('description').value.trim();
    const regularPrice = document.getElementById('regularPrice').value.trim();
    const salePrice = document.getElementById('salePrice').value.trim();
    const imageInput = document.getElementById('imageInput');

    // Size quantities
    const sizeFields = ['S', 'M', 'L', 'XL'];

    // Product Name Validation
    if (!productName) {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(productName)) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }

    // Gender Validation
    if (!gender) {
        displayErrorMessage('gender-error', 'Please select a gender.');
        isValid = false;
    }

    // Category Validation
    if (!category) {
        displayErrorMessage('category-error', 'Please select a category.');
        isValid = false;
    }

    // Description Validation
    if (!description) {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (description.length < 10) {
        displayErrorMessage('description-error', 'Description must be at least 10 characters long.');
        isValid = false;
    }

    // Price Validation
    if (!regularPrice) {
        displayErrorMessage('regularPrice-error', 'Please enter a regular price.');
        isValid = false;
    } else if (!/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }

    if (!salePrice) {
        displayErrorMessage('salePrice-error', 'Please enter a sale price.');
        isValid = false;
    } else if (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative sale price.');
        isValid = false;
    }

    if (parseFloat(regularPrice) <= parseFloat(salePrice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }

    // Size Validation
    let totalQuantity = 0;
    sizeFields.forEach(size => {
        const qtyInput = document.getElementById(`size${size}Qty`);
        if (qtyInput) {
            const qty = qtyInput.value.trim();

            if (qty && (!/^\d+$/.test(qty) || parseInt(qty) < 0)) {
                displayErrorMessage(`size${size}Qty-error`, `Size ${size} quantity must be a non-negative number.`);
                isValid = false;
            }

            // Sum up total quantity
            if (qty) {
                totalQuantity += parseInt(qty);
            }
        }
    });

  
    if (totalQuantity === 0) {
        // Display error message for all size fields since it's a collective error
        sizeFields.forEach(size => {
            displayErrorMessage(`size${size}Qty-error`, 'At least one size must have a quantity.');
        });
        isValid = false;
    }

    // Image Validation - 3 to 5 images
    if (imageFiles.length < 3 || imageFiles.length > 5) {
        displayErrorMessage('imageInput-error', 'Please upload between 3 to 5 images.');
        isValid = false;
    }

    return isValid;
}





function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    errorElement.innerText = message;
    errorElement.style.display = "block";
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = "none";
    });
}



const genderDropdown = document.getElementById("gender");
const categoryDropdown = document.getElementById("category");
const categories = <%- JSON.stringify(cat) %>;

genderDropdown.addEventListener("change", () => {
  const selectedGender = genderDropdown.value;

  categoryDropdown.innerHTML = '<option value="" disabled selected>Choose category...</option>';

  if (selectedGender) {
    // Filter categories based on the selected gender and isListed status
    const filteredCategories = categories.filter(cat => 
      cat.gender === selectedGender && cat.isListed === true
    );

    filteredCategories.forEach(category => {
      const option = document.createElement("option");
      option.value = category._id;  // Use _id instead of category.name
      option.textContent = category.name;
      categoryDropdown.appendChild(option);
    });

    categoryDropdown.disabled = filteredCategories.length === 0;
  } else {
    categoryDropdown.disabled = true;
  }
});


// Cropper functionality

const imageInput = document.getElementById('imageInput');
const imagePreview = document.getElementById('imagePreview');
const cropModal = document.getElementById('cropModal');
const cropImage = document.getElementById('cropImage');
const cropConfirm = document.getElementById('cropConfirm');
const cropCancel = document.getElementById('cropCancel');

let cropper = null;
let imageFiles = [];
const MAX_IMAGES = 5;

// Event Listeners
imageInput.addEventListener('change', handleImageInput);
cropCancel.addEventListener('click', cancelCrop);
cropConfirm.addEventListener('click', confirmCrop);

// Handle image input
function handleImageInput(e) {
    const files = e.target.files;

    // Check image limit
    if (files.length + imageFiles.length > MAX_IMAGES) {
        showAlert('Limit Exceeded', `You can only upload up to ${MAX_IMAGES} images.`, 'error');
        return;
    }

    Array.from(files).forEach(file => {
        if (!file.type.startsWith("image/")) {
            showAlert('Invalid File Type', 'Please upload only image files.', 'error');
            return;
        }

        const reader = new FileReader();
        reader.onload = (e) => showCropModal(e.target.result);
        reader.onerror = () => showAlert('Error', 'Failed to read the image file.', 'error');
        reader.readAsDataURL(file);
    });
}

// Show the crop modal
function showCropModal(imageSrc) {
    cropImage.src = imageSrc;
    cropModal.classList.remove('hidden');

    cropper = new Cropper(cropImage, {
        aspectRatio: 1,
        viewMode: 2,
        autoCropArea: 0.8,
        scalable: true,
        zoomable: true,
        responsive: true,
        minCropBoxWidth: 100,
        minCropBoxHeight: 100,
    });
}

// Cancel crop
function cancelCrop() {
    if (cropper) cropper.destroy();
    cropModal.classList.add('hidden');
}

// Confirm crop
function confirmCrop(event) {
    event.preventDefault();

    const canvas = cropper.getCroppedCanvas({
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high',
    });

    if (!canvas) {
        showAlert('Error', 'Failed to crop the image.', 'error');
        return;
    }

    canvas.toBlob(blob => {
        if (!blob) return;

        const fileName = `cropped-${Date.now()}.webp`;
        const file = new File([blob], fileName, { type: "image/webp" });
        imageFiles.push(file);
        addImageToPreview(file);

        cropModal.classList.add('hidden');
        cropper.destroy();
    }, "image/webp", 1.0);
}

// Add image to preview section
function addImageToPreview(file) {
    const reader = new FileReader();
    reader.onload = (e) => {
        const imageRow = createImageRow(e.target.result, file);
        imagePreview.appendChild(imageRow);
    };
    reader.readAsDataURL(file);
}

// Create image row
function createImageRow(imageSrc, file) {
    const imageRow = document.createElement('div');
    imageRow.classList.add('flex', 'items-center', 'justify-between', 'border', 'rounded-lg', 'p-6', 'bg-gray-50', 'my-3', 'w-full', 'shadow-lg', 'hover:shadow-xl', 'transition-shadow');

    // Image and file info
    const imageInfo = document.createElement('div');
    imageInfo.classList.add('flex', 'items-center', 'space-x-4');

    const imgElement = document.createElement('img');
    imgElement.src = imageSrc;
    imgElement.alt = file.name;
    imgElement.classList.add('w-12', 'h-12', 'rounded-lg', 'object-cover');

    const fileName = document.createElement('p');
    fileName.textContent = file.name;
    fileName.classList.add('text-base', 'font-medium', 'truncate', 'max-w-[200px]', 'text-gray-800');

    imageInfo.appendChild(imgElement);
    imageInfo.appendChild(fileName);

    // Button container
    const buttonContainer = createButtonContainer(imageRow, file);

    imageRow.appendChild(imageInfo);
    imageRow.appendChild(buttonContainer);

    return imageRow;
}

// Create button container
function createButtonContainer(imageRow, file) {
    const buttonContainer = document.createElement('div');
    buttonContainer.classList.add('flex', 'items-center', 'space-x-4');

    // Set Thumbnail button
    const thumbnailButton = document.createElement('button');
    thumbnailButton.classList.add('text-blue-500', 'hover:text-blue-700', 'transition-colors', 'duration-200', 'set-thumbnail');
    thumbnailButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
    `;
    thumbnailButton.addEventListener('click', () => setThumbnail(imageRow));

    // Delete button
    const deleteButton = document.createElement('button');
    deleteButton.classList.add('text-red-500', 'hover:text-red-700', 'transition-colors', 'duration-200', 'delete-image');
    deleteButton.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
    `;
    deleteButton.addEventListener('click', () => confirmDelete(imageRow, file));

    buttonContainer.appendChild(thumbnailButton);
    buttonContainer.appendChild(deleteButton);

    return buttonContainer;
}

// Set thumbnail
function setThumbnail(imageRow) {
    document.querySelectorAll('.set-thumbnail').forEach(button => {
        button.classList.replace('text-green-500', 'text-blue-500');
    });
    const button = imageRow.querySelector('.set-thumbnail');
    button.classList.replace('text-blue-500', 'text-green-500');
}

// Confirm delete
function confirmDelete(imageRow, file) {
    Swal.fire({
        title: 'Are you sure?',
        text: "You won't be able to undo this!",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, delete it!'
    }).then(result => {
        if (result.isConfirmed) {
            const indexToDelete = imageFiles.indexOf(file);
            if (indexToDelete !== -1) imageFiles.splice(indexToDelete, 1);
            imageRow.remove();
            showAlert('Deleted!', 'Your image has been deleted.', 'success');
        }
    });
}

// Utility: Show SweetAlert messages
function showAlert(title, text, icon) {
    Swal.fire({
        icon,
        title,
        text,
        toast: true,
        position: 'top',
        showConfirmButton: false,
        timer: 3000,
        timerProgressBar: true,
    });
}

      </script>
      
      </div>

<%- include('../partials/admin/footer') %> 
