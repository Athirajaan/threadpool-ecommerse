<div class="flex h-screen">
<%- include('../partials/admin/header') %>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<main class="flex-1">
<div class="container mx-auto px-4 py-8 mt-8">
  <div class="flex justify-between items-center mb-10">
    <h1 class="text-2xl font-bold text-gray-900">Offer Management</h1>
    <button
      onclick="openAddOfferModal()"
      class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg flex items-center gap-2"
    >
      <svg
        class="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M12 4v16m8-8H4"
        ></path>
      </svg>
      Add New Offer
    </button>
  </div>

  <!-- Offer Table -->
  <div class="bg-white rounded-lg shadow overflow-hidden">
    <table class="min-w-full divide-y divide-gray-200">
      <thead class="bg-gray-50">
        <tr>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
          >
            Offer Name
          </th>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
          >
            Type
          </th>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
          >
            Applicable For
          </th>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
          >
            Offer
          </th>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
          >
            Expiry
          </th>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
          >
            Edit
          </th>
          <th
            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
          >
            Status
          </th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200">
        <% if (offers && offers.length > 0) { %>
            <% offers.forEach(function(offer) { %>
                <tr>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                        <%= offer.name %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <%= offer.offerType %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <%= offer.applicableFor ? 
                            (offer.offerType === 'Product' ? 
                                offer.applicableFor.productName : 
                                offer.applicableFor.name) : 
                            'N/A' 
                        %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <%= offer.percentage %>%
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <%= new Date(offer.endDate).toLocaleDateString('en-US', { 
                            year: 'numeric', 
                            month: 'short', 
                            day: 'numeric' 
                        }) %>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        <button onclick="openEditModal('<%= offer._id %>')" class="text-blue-600 hover:text-blue-900">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                    d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z">
                                </path>
                            </svg>
                        </button>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <button 
                            onclick="toggleOfferStatus('<%= offer._id %>', <%= offer.isActive %>)"
                            class="px-3 py-1 rounded-full text-sm font-medium <%= offer.isActive ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800' %>"
                        >
                            <%= offer.isActive ? 'Active' : 'Inactive' %>
                        </button>
                    </td>
                </tr>
            <% }); %>
        <% } else { %>
            <tr>
                <td colspan="7" class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 text-center">
                    No offers found
                </td>
            </tr>
        <% } %>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <% if (pagination && pagination.totalPages > 0) { %>
    <div class="flex items-center justify-center mt-4 space-x-2">
      <!-- Previous Button -->
      <a href="?page=<%= pagination.currentPage > 1 ? pagination.currentPage - 1 : 1 %>" 
         class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= pagination.currentPage === 1 ? 'cursor-not-allowed opacity-50' : '' %>">
        &laquo;
      </a>

      <!-- Page Numbers -->
      <% for (let i = 1; i <= pagination.totalPages; i++) { %>
        <a href="?page=<%= i %>" 
           class="px-4 py-2 rounded <%= pagination.currentPage === i ? 'bg-blue-500 text-white hover:bg-blue-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300' %>">
          <%= i %>
        </a>
      <% } %>

      <!-- Next Button -->
      <a href="?page=<%= pagination.currentPage < pagination.totalPages ? pagination.currentPage + 1 : pagination.totalPages %>" 
         class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= pagination.currentPage === pagination.totalPages ? 'cursor-not-allowed opacity-50' : '' %>">
        &raquo;
      </a>
    </div>
  <% } %>
  </main>
  </div>

  <!-- Add this for debugging -->
  <script>
    console.log('Pagination Data:', <%- JSON.stringify(pagination) %>);
  </script>

  <!-- Add Offer Modal -->
  <div
    id="addOfferModal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden overflow-y-auto h-full w-full z-50 transition-all duration-300 ease-in-out"
  >
    <div
      class="fixed bottom-0 left-0 right-0 p-8 border w-full h-screen shadow-2xl rounded-t-xl bg-white transform transition-transform duration-300 ease-in-out translate-y-full"
      id="modalContent"
    >
      <!-- Modal Header -->
      <div class="flex justify-between items-center mb-8">
        <div class="flex items-center space-x-3">
          <div class="bg-blue-100 p-2 rounded-lg">
            <svg
              class="w-6 h-6 text-blue-600"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M15 5v2m0 4v2m0 4v2M5 5a2 2 0 00-2 2v3a2 2 0 110 4v3a2 2 0 002 2h14a2 2 0 002-2v-3a2 2 0 110-4V7a2 2 0 00-2-2H5z"
              />
            </svg>
          </div>
          <h3 class="text-2xl font-bold text-gray-900">Add New Offer</h3>
        </div>
        <button
          onclick="closeAddOfferModal()"
          class="text-gray-400 hover:text-gray-500"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M6 18L18 6M6 6l12 12"
            />
          </svg>
        </button>
      </div>

      <!-- Modal Content -->
      <form id="addOfferForm" onsubmit="submitOffer(event)" class="h-full">
        <div class="grid grid-cols-2 gap-x-12 gap-y-6 h-[calc(100vh-200px)]">
          <!-- Left Column -->
          <div class="bg-gray-50 p-6 rounded-xl h-full">
            <h4 class="text-lg font-semibold text-gray-700 mb-6">
              Basic Details
            </h4>

            <div class="space-y-6">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Offer Name
                </label>
                <input
                  type="text"
                  name="name"
                  id="offerName"
                  required
                  pattern="^[A-Za-z\s]{3,20}$"
                  title="Offer name must be 3-20 characters long and contain only letters and spaces"
                  placeholder="Enter offer name"
                  class="w-full px-4 py-2.5 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
                <span id="nameError" class="text-red-500 text-sm hidden"
                  >Invalid offer name</span
                >
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Offer Type
                </label>
                <select
                  name="offerType"
                  id="offerType"
                  required
                  onchange="updateApplicableFor()"
                  class="w-full px-4 py-2.5 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Select type</option>
                  <option value="Product">Product</option>
                  <option value="Category">Category</option>
                </select>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Gender
                </label>
                <select
                  name="gender"
                  id="gender"
                  required
                  onchange="updateApplicableFor()"
                  class="w-full px-4 py-2.5 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">Select gender</option>
                  <option value="Men">Men</option>
                  <option value="Women">Women</option>
                </select>
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Applicable For
                </label>
                <select
                  name="applicableFor"
                  id="applicableFor"
                  required
                  class="w-full px-4 py-2.5 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                >
                  <option value="">First select offer type</option>
                </select>
              </div>
            </div>
          </div>

          <!-- Right Column -->
          <div class="bg-gray-50 p-6 rounded-xl h-full">
            <h4 class="text-lg font-semibold text-gray-700 mb-6">
              Offer Details
            </h4>

            <div class="space-y-6">
              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Discount Percentage
                </label>
                <div class="relative">
                  <input
                    type="number"
                    name="percentage"
                    id="percentage"
                    required
                    min="1"
                    max="70"
                    placeholder="Enter percentage"
                    class="w-full pr-8 pl-4 py-2.5 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <span
                    class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500"
                  >
                    %
                  </span>
                </div>
                <span id="percentageError" class="text-red-500 text-sm hidden"
                  >Percentage must be between 1 and 70</span
                >
              </div>

              <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">
                  Expiry Date
                </label>
                <input
                  type="date"
                  name="endDate"
                  id="expiryDate"
                  required
                  min="<%= new Date().toISOString().split('T')[0] %>"
                  class="w-full px-4 py-2.5 rounded-lg border border-gray-300 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
              </div>
            </div>
          </div>
        </div>

        <!-- Submit Button -->
        <div class="mt-8 flex justify-end">
          <button
            type="submit"
            class="bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg"
          >
            Add Offer
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<%- include('../partials/admin/footer') %>

<script>
  function openAddOfferModal() {
    const modal = document.getElementById('addOfferModal');
    const modalContent = document.getElementById('modalContent');
    modal.classList.remove('hidden');
    // Force a reflow to enable the transition
    modalContent.offsetHeight;
    modalContent.classList.remove('translate-y-full');
    modalContent.classList.add('translate-y-0');
  }

  function closeAddOfferModal() {
    const modal = document.getElementById('addOfferModal');
    const modalContent = document.getElementById('modalContent');
    modalContent.classList.remove('translate-y-0');
    modalContent.classList.add('translate-y-full');
    setTimeout(() => {
      modal.classList.add('hidden');
      document.getElementById('addOfferForm').reset();
      // Reset form to create mode
      document.querySelector('#addOfferModal h3').textContent = 'Add New Offer';
      document.querySelector('#addOfferModal button[type="submit"]').textContent = 'Add Offer';
      document.getElementById('addOfferForm').onsubmit = submitOffer;
      currentOfferId = null;
    }, 300);
  }

  function updateApplicableFor() {
    const offerType = document.getElementById('offerType').value;
    const gender = document.getElementById('gender').value;
    const applicableFor = document.getElementById('applicableFor');

    console.log('Selected Type:', offerType); // For debugging
    console.log('Selected Gender:', gender); // For debugging

    // Clear existing options
    applicableFor.innerHTML = '<option value="">Select an option</option>';

    if (!offerType || !gender) {
        return;
    }

    if (offerType === 'Product') {
        <% products.forEach(function(product) { %>
            console.log('Checking product:', '<%= product.gender %>', gender); // For debugging
            if ('<%= product.gender %>' === gender) {
                applicableFor.innerHTML += `
                    <option value="<%= product._id %>">
                        <%= product.productName %>
                    </option>
                `;
            }
        <% }); %>
    } else if (offerType === 'Category') {
        <% categories.forEach(function(category) { %>
            console.log('Checking category:', '<%= category.gender %>', gender); // For debugging
            if ('<%= category.gender %>' === gender) {
                applicableFor.innerHTML += `
                    <option value="<%= category._id %>">
                        <%= category.name %>
                    </option>
                `;
            }
        <% }); %>
    }

    console.log('Final dropdown HTML:', applicableFor.innerHTML); // For debugging
  }

  async function submitOffer(event) {
    event.preventDefault();

    // Validate form first
    if (!validateForm()) {
        return;
    }

    // Get form data
    const formData = {
        name: document.getElementById('offerName').value,
        offerType: document.getElementById('offerType').value,
        gender: document.getElementById('gender').value,
        applicableFor: document.getElementById('applicableFor').value,
        percentage: document.getElementById('percentage').value,
        endDate: document.getElementById('expiryDate').value
    };

    try {
        const response = await fetch('/admin/offer/create', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        if (!response.ok) {
            const data = await response.json();
            throw new Error(data.message || 'Failed to create offer');
        }

        const data = await response.json();

        // Show success message
        await Swal.fire({
            title: 'Success!',
            text: 'Offer created successfully',
            icon: 'success',
            timer: 2000,
            showConfirmButton: false
        });

        // Close modal and reset form
        closeAddOfferModal();

        // Reload page to show new offer
        location.reload();

    } catch (error) {
        console.error('Error:', error);
        // Show error message
        Swal.fire({
            title: 'Error!',
            text: error.message || 'Something went wrong',
            icon: 'error',
            confirmButtonText: 'Ok'
        });
    }
  }

  function validateForm() {
    const offerName = document.getElementById('offerName').value;
    const percentage = document.getElementById('percentage').value;
    const nameError = document.getElementById('nameError');
    const percentageError = document.getElementById('percentageError');

    let isValid = true;

    // Validate offer name
    const nameRegex = /^[A-Za-z\s]{3,20}$/;
    if (!nameRegex.test(offerName)) {
      nameError.classList.remove('hidden');
      isValid = false;
    } else {
      nameError.classList.add('hidden');
    }

    // Validate percentage
    if (percentage < 1 || percentage > 70) {
      percentageError.classList.remove('hidden');
      isValid = false;
    } else {
      percentageError.classList.add('hidden');
    }

    return isValid;
  }

  // Update form onsubmit
  document.getElementById('addOfferForm').onsubmit = submitOffer;

  // Real-time validation for offer name
  document.getElementById('offerName').addEventListener('input', function(e) {
    const nameError = document.getElementById('nameError');
    const nameRegex = /^[A-Za-z\s]{3,20}$/;

    if (!nameRegex.test(this.value)) {
      nameError.classList.remove('hidden');
    } else {
      nameError.classList.add('hidden');
    }
  });

  // Real-time validation for percentage
  document.getElementById('percentage').addEventListener('input', function(e) {
    const percentageError = document.getElementById('percentageError');

    if (this.value < 1 || this.value > 70) {
      percentageError.classList.remove('hidden');
    } else {
      percentageError.classList.add('hidden');
    }
  });

  async function toggleOfferStatus(offerId, currentStatus) {
    try {
      const result = await Swal.fire({
        title: 'Are you sure?',
        text: `Do you want to ${currentStatus ? 'deactivate' : 'activate'} this offer?`,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes',
        cancelButtonText: 'No'
      });

      if (result.isConfirmed) {
        const response = await fetch('/admin/offer/toggle-status', {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ offerId })
        });

        const data = await response.json();

        if (response.ok) {
          await Swal.fire({
            title: 'Success!',
            text: data.message,
            icon: 'success',
            timer: 1500,
            showConfirmButton: false
          });
          location.reload();
        } else {
          throw new Error(data.message || 'Failed to update status');
        }
      }
    } catch (error) {
      console.error('Error:', error);
      Swal.fire({
        title: 'Error!',
        text: error.message || 'Something went wrong',
        icon: 'error',
        confirmButtonText: 'Ok'
      });
    }
  }

  let currentOfferId = null;

  async function openEditModal(offerId) {
    try {
        currentOfferId = offerId;
        const response = await fetch(`/admin/offer/${offerId}`);
        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message);
        }

        const offer = data.offer;

        // Fill form with existing data
        document.getElementById('offerName').value = offer.name;
        document.getElementById('offerType').value = offer.offerType;
        document.getElementById('gender').value = offer.gender;
        
        // Trigger offerType change to load applicable items
        await updateApplicableFor();
        
        // Set applicable item after options are loaded
        setTimeout(() => {
            document.getElementById('applicableFor').value = offer.applicableFor._id;
        }, 100);
        
        document.getElementById('percentage').value = offer.percentage;
        document.getElementById('expiryDate').value = offer.endDate.split('T')[0];

        // Update form submission handler
        document.getElementById('addOfferForm').onsubmit = updateOffer;
        
        // Update modal title
        document.querySelector('#addOfferModal h3').textContent = 'Edit Offer';
        document.querySelector('#addOfferModal button[type="submit"]').textContent = 'Update Offer';

        openAddOfferModal();

    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: error.message || 'Failed to load offer details',
            icon: 'error',
            confirmButtonText: 'Ok'
        });
    }
  }

  async function updateOffer(event) {
    event.preventDefault();

    if (!validateForm()) {
        return;
    }

    const formData = {
        name: document.getElementById('offerName').value,
        offerType: document.getElementById('offerType').value,
        gender: document.getElementById('gender').value,
        applicableFor: document.getElementById('applicableFor').value,
        percentage: document.getElementById('percentage').value,
        endDate: document.getElementById('expiryDate').value
    };

    try {
        const response = await fetch(`/admin/offer/${currentOfferId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });

        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message);
        }

        await Swal.fire({
            title: 'Success!',
            text: 'Offer updated successfully',
            icon: 'success',
            timer: 2000,
            showConfirmButton: false
        });

        closeAddOfferModal();
        location.reload();

    } catch (error) {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: error.message || 'Failed to update offer',
            icon: 'error',
            confirmButtonText: 'Ok'
        });
    }
  }
</script>
