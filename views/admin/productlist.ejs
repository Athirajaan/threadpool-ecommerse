
<div class="flex h-screen">
<%- include('../partials/admin/header') %>  
    <main class="flex-1">
      <div class="flex-1 p-6 mt-6">
        <div class="mb-4 flex items-center justify-between">
          <nav class="text-sm text-gray-500">
            <a href="#" class="hover:text-yellow-500">Dashboard</a> >
            <a href="#" class="text-gray-800">All Products</a>
          </nav>
          <a href="/admin/addProducts" class="px-4 py-2 text-white bg-yellow-500 rounded hover:bg-yellow-600">
            Add New Product
          </a>
               
        </div>
    
        <!-- Search Bar -->
        <div class="mb-4">
          <input 
            type="text" 
            id="productSearch" 
            placeholder="Search products..." 
            value="<%= searchQuery || '' %>"
            class="w-full p-3 border rounded-md focus:outline-none focus:ring-2 focus:ring-yellow-500"
          >
        </div>
    
        <!-- Responsive Table -->
        <div class="overflow-x-auto bg-white rounded-lg shadow">
          <table class="w-full text-left border-collapse">
            <thead class="bg-gray-200">
              <tr>
                <th class="p-4">Name</th>
                <th class="p-4">Gender</th>
                <th class="p-4">Category</th>
                <th class="p-4">Status</th>
                <th class="p-4">Price</th>
                <th class="p-4">Variants</th>
                <th class="p-4">Actions</th>
              </tr>
            </thead>
            <tbody>
              <% for (let i = data.length - 1; i >= 0; i--) { %>
                <tr class="border-b hover:bg-gray-100">
                  <td class="p-4"><%= data[i].productName %></td>
                  <td class="p-4"><%= data[i].gender %></td>
                  <td class="p-4"><%= data[i].category ? data[i].category.name : 'N/A' %></td>
                  <td class="p-4 text-orange-500"> <%= data[i].totalQuantity <= 10 ? 'Low Stock' : 'In Stock' %></td>
                  <td class="p-4"><%= data[i].salePrice %></td>
                  <td class="p-4">
                    <button 
                    onclick="openModal(event, '<%= data[i]._id %>', '<%= data[i].productName %>')" 
                    class="px-3 py-1 text-yellow-600 border border-yellow-500 rounded hover:bg-yellow-500 hover:text-white">
                    View
                    </button>
                  </td>
                  <td class="p-4 flex space-x-2">
                    <button  title="Edit product details" class="px-3 py-1 text-white bg-green-500 rounded hover:bg-green-600">
                      <a href="/admin/editProduct/<%= data[i]._id %>"> Edit </a>
                    </button>
                    <% if (data[i].isBlocked === false) { %>
                      <button class="block-btn bg-red-500 text-white w-24 h-10  rounded-lg font-semibold hover:bg-red-600 transition duration-200" 
                          data-action="block" data-product-id="<%= data[i].id %>">
                          Block
                      </button>
                      <% } else { %>
                      <button class="unblock-btn bg-green-500 text-white w-24 h-10  rounded-lg font-semibold hover:bg-green-600 transition duration-200 ml-2" 
                          data-action="unblock" data-product-id="<%= data[i].id %>">
                          Unblock
                      </button>
                      <% } %>
                  </td>

                </td>
                </tr>
              <% } %>
            </tbody>
            
          </table>
        </div>


                <!-- modal for confirmation-->
                <div id="confirmationModal" 
                class="fixed inset-0 flex items-center justify-center z-50 hidden bg-gray-900 bg-opacity-50"
                aria-hidden="true">
               <div class="bg-white p-6 rounded-lg shadow-lg w-1/3">
                   <h2 class="text-lg font-semibold mb-4">Are you sure?</h2>
                   <p class="mb-4">Do you really want to <span id="actionText"></span> this product?</p>
                   <div class="flex justify-end space-x-4">
                       <button id="cancelBtn" class="bg-gray-300 px-4 py-2 rounded-lg">Cancel</button>
                       <button id="confirmBtn" class="bg-red-500 text-white px-4 py-2 rounded-lg">Yes</button>
                   </div>
               </div>
           </div>
           
    
        <!-- Pagination -->
        <div class="flex items-center justify-center mt-4 space-x-2">
          <!-- Previous Button -->
          <a href="?page=<%= currentPage - 1 %>" 
             class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= (currentPage === 1) ? 'cursor-not-allowed opacity-50' : '' %>">
            &laquo;
          </a>
        
          <!-- Page Numbers -->
          <% for (let i = 1; i <= totalPages; i++) { %>
            <a href="?page=<%= i %>"
               class="px-4 py-2 text-gray-700 rounded hover:bg-yellow-500 hover:text-white <%= (i === currentPage) ? 'bg-yellow-500 text-white' : 'bg-gray-200' %>">
              <%= i %>
            </a>
          <% } %>
        
          <!-- Next Button -->
          <a href="?page=<%= currentPage + 1 %>" 
             class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= (currentPage === totalPages) ? 'cursor-not-allowed opacity-50' : '' %>">
            &raquo;
          </a>
        </div>
        
      </main>
    </div>
    
        <!-- Modal for varient-->
        <div id="variantModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-30 hidden z-50">
          <div class="bg-white rounded-lg shadow-lg w-11/12 md:w-1/2 p-6 fade-in">
            <h2 class="text-lg font-bold text-yellow-600 mb-4" id="productTitle"></h2>
            <table class="w-full text-left">
              <thead class="bg-gray-200">
                <tr>
                  <th class="p-2">Size</th>
                  <th class="p-2">Quantity</th>
                  <th class="p-2">price</th>
                </tr>
              </thead>
              <tbody id="variantTableBody">
                <!-- Example Sizes -->
              
              </tbody>
            </table>
            <div class="mt-4 text-right">
              <button onclick="closeModal()" class="px-4 py-2 text-yellow-600 border border-yellow-500 rounded hover:bg-yellow-500 hover:text-white">
                Close
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  
    <script>

  
// Function to open the modal
function openModal(event, productId, productName) {
  console.log('Product ID:', productId);
  console.log('Product Name:', productName);

  const modal = document.getElementById('variantModal');
  const title = document.getElementById('productTitle');
  const tbody = document.getElementById('variantTableBody');

  // Set modal title
  title.innerText = `Variants for ${productName}`;
  tbody.innerHTML = `
    <tr>
      <td colspan="3" class="p-4 text-center text-gray-500">Loading...</td>
    </tr>`;

  // Fetch variant data
  fetch(`http://localhost:3000/admin/products/${productId}/variants`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Failed to fetch data');
      }
      return response.json();
    })
    .then(data => {
      console.log('Fetched data:', data);
      tbody.innerHTML = ''; 

      if (data.length === 0) {
        tbody.innerHTML = `
          <tr>
            <td colspan="3" class="p-4 text-center text-gray-500">No variants available</td>
          </tr>`;
      } else {
        // Populate table with variants
        data.forEach(variant => {
          const row = `
            <tr>
              <td class="p-2">${variant.size}</td>
              <td class="p-2">${variant.quantity}</td>
              <td class="p-2">${variant.price} Rs</td>
            </tr>`;
          tbody.innerHTML += row;
        });
      }

      // Show the modal
      modal.classList.remove('hidden');
    })
    .catch(error => {
      console.error('Error fetching variants:', error);
      tbody.innerHTML = `<tr><td colspan="3" class="text-center text-red-500">Failed to load variants</td></tr>`;
    });
}

function closeModal() {
  document.getElementById('variantModal').classList.add('hidden');
}



    confirmationModal.setAttribute('aria-hidden', 'false'); // Show modal
    confirmationModal.setAttribute('aria-hidden', 'true');  // Hide modal

  
    document.addEventListener('DOMContentLoaded', () => {
  const confirmationModal = document.getElementById("confirmationModal");
  const confirmBtn = document.getElementById("confirmBtn");
  const cancelBtn = document.getElementById("cancelBtn");
  const actionText = document.getElementById("actionText");

  let action = "";
  let productId = "";
  let buttonToUpdate = null; 
  document.body.addEventListener('click', (event) => {
    const button = event.target.closest('.block-btn, .unblock-btn');
    if (button) {
      event.preventDefault(); 

      action = button.dataset.action; 
      productId = button.dataset.productId;
      buttonToUpdate = button; 

      // Set the action text dynamically
      actionText.textContent = action.charAt(0).toUpperCase() + action.slice(1);

      // Show the modal
      confirmationModal.classList.remove('hidden');

      // Confirm the action
      confirmBtn.onclick = async () => {
        try {
          const response = await fetch(`/admin/${action}Product`, {
            method: 'PATCH', 
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId }), 
          });

          if (response.ok) {
            confirmationModal.classList.add('hidden');
            if (action === "block") {
              buttonToUpdate.textContent = "Unblock"; 
              buttonToUpdate.classList.remove("bg-red-500");
              buttonToUpdate.classList.add("bg-green-500");
              buttonToUpdate.dataset.action = "unblock";
            } else if (action === "unblock") {
              buttonToUpdate.textContent = "Block"; 
              buttonToUpdate.classList.remove("bg-green-500");
              buttonToUpdate.classList.add("bg-red-500");
              buttonToUpdate.dataset.action = "block";
            }

          } else {
            throw new Error('Failed to update product');
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Something went wrong!');
        }
      };

      // Cancel the action and close the modal
      cancelBtn.onclick = () => {
        confirmationModal.classList.add('hidden');
      };
    }
  });
});

let searchTimeout;

document.getElementById('productSearch').addEventListener('input', function(e) {
    clearTimeout(searchTimeout);
    
    searchTimeout = setTimeout(() => {
        const searchQuery = e.target.value.trim();
        
        // Update URL with search parameter without refreshing
        const url = new URL(window.location.href);
        if (searchQuery) {
            url.searchParams.set('search', searchQuery);
        } else {
            url.searchParams.delete('search');
        }
        window.history.pushState({}, '', url);

        // Fetch and update products
        fetch(`/admin/searchProducts?search=${encodeURIComponent(searchQuery)}`)
            .then(response => response.json())
            .then(data => {
                const tbody = document.querySelector('tbody');
                tbody.innerHTML = '';

                if (data.products.length === 0) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="7" class="p-4 text-center text-gray-500">
                                No products found
                            </td>
                        </tr>
                    `;
                    return;
                }

                data.products.forEach(product => {
                    const row = `
                        <tr class="border-b hover:bg-gray-100">
                            <td class="p-4">${product.productName}</td>
                            <td class="p-4">${product.gender}</td>
                            <td class="p-4">${product.category ? product.category.name : 'N/A'}</td>
                            <td class="p-4 text-orange-500">${product.totalQuantity <= 10 ? 'Low Stock' : 'In Stock'}</td>
                            <td class="p-4">${product.salePrice}</td>
                            <td class="p-4">
                                <button 
                                    onclick="openModal(event, '${product._id}', '${product.productName}')" 
                                    class="px-3 py-1 text-yellow-600 border border-yellow-500 rounded hover:bg-yellow-500 hover:text-white">
                                    View
                                </button>
                            </td>
                            <td class="p-4 flex space-x-2">
                                <button title="Edit product details" class="px-3 py-1 text-white bg-green-500 rounded hover:bg-green-600">
                                    <a href="/admin/editProduct/${product._id}">Edit</a>
                                </button>
                                ${product.isBlocked === false ? 
                                    `<button class="block-btn bg-red-500 text-white w-24 h-10 rounded-lg font-semibold hover:bg-red-600 transition duration-200" 
                                        data-action="block" data-product-id="${product._id}">
                                        Block
                                    </button>` :
                                    `<button class="unblock-btn bg-green-500 text-white w-24 h-10 rounded-lg font-semibold hover:bg-green-600 transition duration-200 ml-2" 
                                        data-action="unblock" data-product-id="${product._id}">
                                        Unblock
                                    </button>`
                                }
                            </td>
                        </tr>
                    `;
                    tbody.innerHTML += row;
                });
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }, 300); // Debounce time of 300ms
});

// Add this to handle browser back/forward
window.addEventListener('popstate', function() {
    const url = new URL(window.location.href);
    const searchQuery = url.searchParams.get('search') || '';
    document.getElementById('productSearch').value = searchQuery;
    // Trigger the search
    document.getElementById('productSearch').dispatchEvent(new Event('input'));
});

    </script>
    

</div>
 
<%- include('../partials/admin/footer') %> 
