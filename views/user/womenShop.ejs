<%- include('../partials/user/userheader') %>

<!-- Hero Video Section -->
<section class="relative w-full h-[400px]">
  <video 
    class="w-full h-full object-cover brightness-75" 
    autoplay 
    loop 
    muted 
    playsinline>
    <source src="/videos/womenShop.mp4" type="video/mp4" />
  </video>
  <div class="absolute inset-0 flex items-center justify-center">
    <h1 class="text-4xl md:text-5xl font-bold text-white tracking-wide">Men’s Gymwear: Built for Strength</h1>
  </div>
</section>

<!-- Main Shopping Section -->
<div class="container mx-auto px-4 py-8">
  <div class="flex gap-8">
    <!-- Sticky Filter Sidebar -->
    <aside class="w-64 flex-shrink-0">
      <div class="bg-white rounded-lg shadow-lg p-6 sticky top-24">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-lg font-semibold text-gray-800">Filters</h2>
          <button id="resetFilters" class="text-sm text-blue-600 hover:text-blue-800 hidden">
            Clear All
          </button>
        </div>

        <!-- Categories -->
        <div class="mb-6">
          <h3 class="text-md font-medium text-gray-700 mb-3">Categories</h3>
          <div class="space-y-2">
            <% category.forEach(cat => { %>
              <label class="flex items-center group cursor-pointer">
                <input type="checkbox" 
                       class="form-checkbox h-4 w-4 text-blue-600 transition duration-150 ease-in-out" 
                       value="<%= cat._id %>">
                <span class="ml-2 text-gray-600 group-hover:text-gray-900"><%= cat.name %></span>
              </label>
            <% }) %>
          </div>
        </div>

        <!-- Sizes -->
        <div class="mb-6">
          <h3 class="text-md font-medium text-gray-700 mb-3">Sizes</h3>
          <div class="flex flex-wrap gap-2">
            <% ['S', 'M', 'L', 'XL'].forEach(size => { %>
              <button 
                class="size-option px-3 py-1 rounded-full border-2 border-gray-200 text-gray-600 hover:border-blue-500 hover:text-blue-500 transition-colors"
                data-size="<%= size %>">
                <%= size %>
              </button>
            <% }) %>
          </div>
        </div>

        <!-- Price Range -->
        <div class="mb-6">
          <h3 class="text-md font-medium text-gray-700 mb-3">Price Range</h3>
          <div class="space-y-2">
            <% const priceRanges = [
              { value: 'under500', label: 'Under ₹500' },
              { value: '500to799', label: '₹500 - ₹799' },
              { value: '800to999', label: '₹800 - ₹999' },
              { value: '1000to1999', label: '₹1000 - ₹1999' },
              { value: '2000plus', label: '₹2000+' }
            ] %>
            <% priceRanges.forEach(range => { %>
              <label class="flex items-center group cursor-pointer">
                <input type="checkbox" 
                       class="form-checkbox h-4 w-4 text-blue-600 transition duration-150 ease-in-out" 
                       value="<%= range.value %>">
                <span class="ml-2 text-gray-600 group-hover:text-gray-900"><%= range.label %></span>
              </label>
            <% }) %>
          </div>
        </div>
      </div>
    </aside>

    <!-- Products Section -->
    <div class="flex-1">
      <!-- Sort Options -->
      <div class="flex justify-end mb-6">
        <form action="/WomenShop" method="GET" class="w-64">
          <select 
            name="sort" 
            onchange="this.form.submit()"
            class="w-full bg-white px-4 py-2 rounded-lg shadow-sm border border-gray-300 focus:border-blue-500 focus:ring-1 focus:ring-blue-500"
          >
            <option value="newest" <%= locals.sortOption === 'newest' ? 'selected' : '' %>>Newest First</option>
            <option value="priceAsc" <%= locals.sortOption === 'priceAsc' ? 'selected' : '' %>>Price: Low to High</option>
            <option value="priceDesc" <%= locals.sortOption === 'priceDesc' ? 'selected' : '' %>>Price: High to Low</option>
            <option value="nameAsc" <%= locals.sortOption === 'nameAsc' ? 'selected' : '' %>>Name: A to Z</option>
            <option value="nameDesc" <%= locals.sortOption === 'nameDesc' ? 'selected' : '' %>>Name: Z to A</option>
          </select>
        </form>
      </div>

      <!-- Products Grid -->
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <% products.forEach(product => { %>
          <div class="group">
            <div class="relative bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
              <!-- Product Image with Hover Effect -->
              <a href="/productDetails?id=<%= product._id %>" class="block">
              <div class="aspect-w-1 aspect-h-1 w-full relative overflow-hidden">
                <img 
                  src="<%= product.productImage[0] %>" 
                  alt="<%= product.productName %>" 
                  class="w-full h-full object-cover transition-opacity duration-300 group-hover:opacity-0">
                <img 
                  src="<%= product.productImage[1] || product.productImage[0] %>" 
                  alt="<%= product.productName %>" 
                  class="w-full h-full object-cover absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100">
              </div>
              </a>
              
              <!-- Quick Actions -->
              <div class="absolute top-4 right-4 space-y-2 opacity-0 group-hover:opacity-100 transition-opacity">
                <button 
                  class="wishlist-btn p-2 bg-white rounded-full shadow-md hover:bg-gray-100 transition-colors"
                  data-product-id="<%= product._id %>"
                  data-in-wishlist="<%= wishlistProducts.includes(product._id.toString()) ? 'true' : 'false' %>"
                >
                  <svg class="w-5 h-5 wishlist-icon <%= wishlistProducts.includes(product._id.toString()) ? 'text-red-500' : 'text-gray-400' %>" 
                       fill="currentColor" 
                       viewBox="0 0 24 24">
                    <path d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                  </svg>
                </button>
              </div>

              <!-- Product Info -->
              <div class="p-4">
                <h3 class="text-lg font-medium text-gray-900 mb-2"><%= product.productName %></h3>
                <div class="flex items-center justify-between">
                  <div class="flex items-baseline">
                    <span class="text-lg font-bold text-gray-900">₹<%= product.salePrice %></span>
                    <span class="ml-2 text-sm text-gray-500 line-through">₹<%= product.regularPrice %></span>
                  </div>
                  <span class="text-sm font-medium text-green-600">
                    <%= Math.round((product.regularPrice - product.salePrice) / product.regularPrice * 100) %>% OFF
                  </span>
                </div>
              </div>
            </div>
          </div>
        <% }) %>
      </div>
    </div>
  </div>
</div>

<script>
// Size selection
const sizeButtons = document.querySelectorAll('.size-option');
sizeButtons.forEach(button => {
  button.addEventListener('click', () => {
    button.classList.toggle('border-blue-500');
    button.classList.toggle('text-blue-500');
  });
});

// Filter reset button visibility
const filterInputs = document.querySelectorAll('input[type="checkbox"]');
const resetButton = document.getElementById('resetFilters');

function updateResetButtonVisibility() {
  const anyChecked = Array.from(filterInputs).some(input => input.checked);
  resetButton.classList.toggle('hidden', !anyChecked);
}

filterInputs.forEach(input => {
  input.addEventListener('change', updateResetButtonVisibility);
});

resetButton.addEventListener('click', () => {
  filterInputs.forEach(input => {
    input.checked = false;
  });
  sizeButtons.forEach(button => {
    button.classList.remove('border-blue-500', 'text-blue-500');
  });
  updateResetButtonVisibility();
});

document.addEventListener('DOMContentLoaded', function() {
    const wishlistButtons = document.querySelectorAll('.wishlist-btn');

    wishlistButtons.forEach(button => {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            
            const productId = this.dataset.productId;
            const isInWishlist = this.dataset.inWishlist === 'true';
            const icon = this.querySelector('.wishlist-icon');
            
            try {
                const response = await fetch('/wishlist/toggle', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ productId })
                });

                const data = await response.json();

                if (data.success) {
                    // Toggle wishlist state
                    this.dataset.inWishlist = (!isInWishlist).toString();
                    
                    // Update icon color
                    if (!isInWishlist) {
                        icon.classList.remove('text-gray-400');
                        icon.classList.add('text-red-500');
                        
                        // Show success message
                        Swal.fire({
                            icon: 'success',
                            title: 'Added to Wishlist',
                            text: 'Product has been added to your wishlist',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    } else {
                        icon.classList.remove('text-red-500');
                        icon.classList.add('text-gray-400');
                        
                        // Show removal message
                        Swal.fire({
                            icon: 'success',
                            title: 'Removed from Wishlist',
                            text: 'Product has been removed from your wishlist',
                            showConfirmButton: false,
                            timer: 1500
                        });
                    }

                    // Update wishlist count in header if it exists
                    const wishlistCount = document.querySelector('.wishlist-count');
                    if (wishlistCount) {
                        let count = parseInt(wishlistCount.textContent);
                        wishlistCount.textContent = isInWishlist ? count - 1 : count + 1;
                    }

                } else {
                    throw new Error(data.message);
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Oops...',
                    text: 'Something went wrong! Please try again.',
                });
            }
        });
    });
});

</script>

<%- include('../partials/user/userfooter') %>







