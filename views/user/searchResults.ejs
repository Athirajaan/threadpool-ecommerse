<%- include('../partials/user/userheader') %>

<!-- Search Results Header -->
<div class="bg-gray-100 py-8">
  <div class="container mx-auto px-4">
    <h1 class="text-3xl font-bold text-gray-900 mb-2">Search Results</h1>
    <p class="text-gray-600">
      Showing results for "<span class="font-medium text-blue-600"><%= searchQuery %></span>"
    </p>
  </div>
</div>

<!-- Main Content -->
<div class="flex-1 container mx-auto px-4 py-8">
  <div class="flex gap-8">
    <!-- Sticky Filter Sidebar -->
    <aside class="w-72 flex-shrink-0">
      <div class="bg-white rounded-xl shadow-md sticky top-24 max-h-[calc(100vh-120px)] overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100">
        <div class="p-6">
          <!-- Header with Reset -->
          <div class="flex justify-between items-center mb-8 sticky top-0 bg-white z-10 py-2">
            <h2 class="text-xl font-bold text-gray-800">Filters</h2>
            <button id="resetFilters" 
                    class="hidden text-sm text-blue-600 hover:text-blue-800 font-medium transition-colors duration-200">
              Clear All
            </button>
          </div>

          <!-- Sort Options -->
          <div class="mb-8 border-b border-gray-100 pb-6">
            <h3 class="text-md font-semibold text-gray-700 mb-4">Sort By</h3>
            <div class="space-y-3">
              <label class="flex items-center group cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200">
                <input type="radio" name="sort" value="newest" checked class="form-radio h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <span class="ml-3 text-gray-700 group-hover:text-gray-900">Newest First</span>
              </label>
              
              <label class="flex items-center group cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200">
                <input type="radio" name="sort" value="priceAsc" class="form-radio h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <span class="ml-3 text-gray-700 group-hover:text-gray-900">Price: Low to High</span>
              </label>
              
              <label class="flex items-center group cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200">
                <input type="radio" name="sort" value="priceDesc" class="form-radio h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <span class="ml-3 text-gray-700 group-hover:text-gray-900">Price: High to Low</span>
              </label>
              
              <label class="flex items-center group cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200">
                <input type="radio" name="sort" value="nameAsc" class="form-radio h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <span class="ml-3 text-gray-700 group-hover:text-gray-900">Name: A to Z</span>
              </label>
              
              <label class="flex items-center group cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200">
                <input type="radio" name="sort" value="nameDesc" class="form-radio h-4 w-4 text-blue-600 border-gray-300 focus:ring-blue-500">
                <span class="ml-3 text-gray-700 group-hover:text-gray-900">Name: Z to A</span>
              </label>
            </div>
          </div>

          <!-- Categories -->
          <div class="mb-8 border-b border-gray-100 pb-6">
            <h3 class="text-md font-semibold text-gray-700 mb-4">Categories</h3>
            <div class="space-y-3">
              <% category.forEach(cat => { %>
                <label class="flex items-center group cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200">
                  <input type="checkbox" 
                         class="category-checkbox form-checkbox h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                         value="<%= cat._id %>">
                  <span class="ml-3 text-gray-700 group-hover:text-gray-900"><%= cat.name %></span>
                </label>
              <% }) %>
            </div>
          </div>

          <!-- Sizes -->
          <div class="mb-8 border-b border-gray-100 pb-6">
            <h3 class="text-md font-semibold text-gray-700 mb-4">Sizes</h3>
            <div class="flex flex-wrap gap-3">
              <% ['S', 'M', 'L', 'XL'].forEach(size => { %>
                <button 
                  class="size-option w-12 h-12 rounded-lg border-2 border-gray-200 text-gray-600 hover:border-blue-500 hover:text-blue-500 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
                  data-size="<%= size %>">
                  <%= size %>
                </button>
              <% }) %>
            </div>
          </div>

          <!-- Price Range -->
          <div class="mb-6">
            <h3 class="text-md font-semibold text-gray-700 mb-4">Price Range</h3>
            <div class="space-y-3">
              <% const priceRanges = [
                { value: 'under500', label: 'Under ₹500' },
                { value: '500to799', label: '₹500 - ₹799' },
                { value: '800to999', label: '₹800 - ₹999' },
                { value: '1000to1999', label: '₹1000 - ₹1999' },
                { value: '2000plus', label: '₹2000+' }
              ] %>
              <% priceRanges.forEach(range => { %>
                <label class="flex items-center group cursor-pointer hover:bg-gray-50 p-2 rounded-lg transition-colors duration-200">
                  <input type="checkbox" 
                         class="price-range-checkbox form-checkbox h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
                         value="<%= range.value %>">
                  <span class="ml-3 text-gray-700 group-hover:text-gray-900"><%= range.label %></span>
                </label>
              <% }) %>
            </div>
          </div>
        </div>
      </div>
    </aside>

    <!-- Products Grid Container -->
    <div class="flex-1">
      <!-- Products Grid -->
      <div id="productsGrid" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        <% if (products.length === 0) { %>
          <div class="col-span-full text-center py-12">
            <h3 class="text-xl text-gray-600">No products found matching your search.</h3>
            <p class="mt-2 text-gray-500">Try adjusting your search terms or filters.</p>
          </div>
        <% } else { %>
          <% products.forEach(product => { %>
            <%- include('../partials/productCard', { product: product }) %>
          <% }) %>
        <% } %>
      </div>
    </div>
  </div>
</div>

<script>
let activeFilters = {
    categories: [],
    sizes: [],
    priceRanges: [],
    sort: 'newest'
};

// Category filter
document.querySelectorAll('.category-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
        if (this.checked) {
            activeFilters.categories.push(this.value);
        } else {
            activeFilters.categories = activeFilters.categories.filter(id => id !== this.value);
        }
        applyFilters();
    });
});

// Size filter
document.querySelectorAll('.size-option').forEach(button => {
    button.addEventListener('click', function() {
        const size = this.dataset.size;
        this.classList.toggle('border-blue-500');
        this.classList.toggle('text-blue-500');
        
        if (this.classList.contains('border-blue-500')) {
            activeFilters.sizes.push(size);
        } else {
            activeFilters.sizes = activeFilters.sizes.filter(s => s !== size);
        }
        applyFilters();
    });
});

// Price range filter
document.querySelectorAll('.price-range-checkbox').forEach(checkbox => {
    checkbox.addEventListener('change', function() {
        if (this.checked) {
            activeFilters.priceRanges.push(this.value);
        } else {
            activeFilters.priceRanges = activeFilters.priceRanges.filter(range => range !== this.value);
        }
        applyFilters();
    });
});

// Sort handler
document.querySelectorAll('input[name="sort"]').forEach(radio => {
    radio.addEventListener('change', function() {
        activeFilters.sort = this.value;
        applyFilters();
    });
});

async function applyFilters() {
    try {
        const searchQuery = new URLSearchParams(window.location.search).get('q');
        const response = await fetch(`/filter-Search`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                categories: activeFilters.categories,
                sizes: activeFilters.sizes,
                priceRanges: activeFilters.priceRanges,
                sort: activeFilters.sort,
                searchQuery: searchQuery,
                searchMode: true
            })
        });

        if (!response.ok) throw new Error('Filter request failed');
        const data = await response.json();
        
        const productsGrid = document.getElementById('productsGrid');
        
        if (!data.success || !data.products || data.products.length === 0) {
            renderEmptyState(productsGrid);
        } else {
            const formattedProducts = data.products.map(product => ({
                _id: product._id,
                productName: product.productName,
                productImage: product.productImage,
                regularPrice: product.regularPrice,
                salePrice: product.salePrice,
                finalPrice: product.salePrice,
                inWishlist: product.inWishlist,
                offer: product.offer
            }));
            
            renderProducts(productsGrid, formattedProducts);
        }
        
        updateResetButtonVisibility();
    } catch (error) {
        console.error('Error applying filters:', error);
        showToast('Error filtering products', 'error');
    }
}

function renderEmptyState(container) {
    container.innerHTML = `
        <div class="col-span-full text-center py-12">
            <h3 class="text-xl text-gray-600">No products found matching your criteria.</h3>
            <p class="mt-2 text-gray-500">Try adjusting your filters or search terms.</p>
            <button onclick="resetAllFilters()" 
                    class="mt-4 px-6 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors">
                Clear All Filters
            </button>
        </div>
    `;
}

function renderProducts(container, products) {
    container.innerHTML = products.map(product => `
        <div class="group">
            <div class="relative bg-white rounded-lg shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-300">
                <a href="/productDetails?id=${product._id}" class="block">
                    <div class="aspect-w-1 aspect-h-1 w-full relative overflow-hidden">
                        <img src="${product.productImage[0]}" 
                             alt="${product.productName}" 
                             class="w-full h-full object-cover transition-opacity duration-300 group-hover:opacity-0">
                        <img src="${product.productImage[1] || product.productImage[0]}" 
                             alt="${product.productName}" 
                             class="w-full h-full object-cover absolute inset-0 opacity-0 transition-opacity duration-300 group-hover:opacity-100">
                    </div>
                </a>
                
                <div class="absolute top-4 right-4 space-y-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    <button 
                        class="wishlist-btn p-2 bg-white rounded-full shadow-md hover:bg-gray-100 transition-colors"
                        data-product-id="${product._id}"
                        data-in-wishlist="${product.inWishlist}">
                        <svg class="w-5 h-5 wishlist-icon ${product.inWishlist ? 'text-red-500' : 'text-gray-400'}" 
                             fill="currentColor" 
                             viewBox="0 0 24 24">
                            <path d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                        </svg>
                    </button>
                </div>

                <div class="p-4">
                    <h3 class="text-sm font-medium text-gray-900 mb-1">${product.productName}</h3>
                    <div class="flex items-baseline justify-between">
                        <div class="flex items-baseline space-x-1">
                            <span class="text-sm font-bold text-gray-900">₹${product.finalPrice}</span>
                            <span class="text-xs text-gray-500 line-through">₹${product.regularPrice}</span>
                        </div>
                        <span class="text-xs font-medium text-green-600">
                            ${Math.round((product.regularPrice - product.finalPrice) / product.regularPrice * 100)}% OFF
                        </span>
                    </div>
                </div>
            </div>
        </div>
    `).join('');
    
    initializeWishlistButtons();
}

function updateResetButtonVisibility() {
    const hasActiveFilters = 
        activeFilters.categories.length > 0 || 
        activeFilters.sizes.length > 0 || 
        activeFilters.priceRanges.length > 0 || 
        activeFilters.sort !== 'newest';
    
    const resetButton = document.getElementById('resetFilters');
    if (resetButton) {
        resetButton.classList.toggle('hidden', !hasActiveFilters);
    }
}

function resetAllFilters() {
    document.querySelectorAll('input[type="checkbox"]').forEach(cb => cb.checked = false);
    document.querySelector('input[name="sort"][value="newest"]').checked = true;
    document.querySelectorAll('.size-option').forEach(btn => {
        btn.classList.remove('border-blue-500', 'text-blue-500');
    });
    
    activeFilters = {
        categories: [],
        sizes: [],
        priceRanges: [],
        sort: 'newest'
    };
    
    applyFilters();
}

document.getElementById('resetFilters')?.addEventListener('click', resetAllFilters);

// Initialize wishlist functionality
function initializeWishlistButtons() {
    document.querySelectorAll('.wishlist-btn').forEach(button => {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            const productId = this.dataset.productId;
            const icon = this.querySelector('.wishlist-icon');
            
            try {
                const response = await fetch('/wishlist/toggle', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ productId })
                });

                const data = await response.json();
                if (data.success) {
                    const isInWishlist = this.dataset.inWishlist === 'true';
                    this.dataset.inWishlist = (!isInWishlist).toString();
                    icon.classList.toggle('text-red-500');
                    icon.classList.toggle('text-gray-400');
                    
                    showToast(data.action === 'added' ? 'Added to wishlist' : 'Removed from wishlist', 'success');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Failed to update wishlist', 'error');
            }
        });
    });
}

function showToast(message, type = 'success') {
    Toastify({
        text: message,
        duration: 3000,
        gravity: "bottom",
        position: "right",
        style: {
            background: type === 'success' ? "#000000" : "#EF4444",
            color: "#ffffff",
            borderRadius: "8px",
            padding: "12px 24px",
            marginBottom: "60px"
        }
    }).showToast();
}

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
    initializeWishlistButtons();
    updateResetButtonVisibility();
});
</script>

<%- include('../partials/user/userfooter') %> 