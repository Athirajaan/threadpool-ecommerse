<%- include('../partials/user/userheader') %> 
<%- include('../partials/user/userprofile') %>

<!-- Main Content -->
<main class="flex-grow p-6 ml-64 min-h-screen relative">
  <!-- Background Image -->
  <img 
    src="/images/newDrop.avif" 
    alt="Background" 
    class="absolute inset-0 w-full h-full object-cover z-0"
  />
  
  <!-- Overlay -->
  <div class="absolute inset-0 bg-black opacity-70 z-0"></div>

  <!-- Content Container -->
  <div class="relative z-10 max-w-5xl mx-auto px-4">
    <div class="w-full max-w-4xl backdrop-blur-sm bg-white/80 rounded-2xl shadow-2xl p-8">
      <!-- Profile Overview Section -->
      <div class="mb-10">
        <div class="flex justify-between items-center mb-6">
          <div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">My Profile</h2>
            <p class="text-gray-600 text-sm">Manage your personal information and preferences here</p>
          </div>
          
          <!-- Edit Button -->
          <button id="editProfileBtn" 
                  class="flex items-center px-6 py-2.5 bg-gray-800 text-white rounded-lg transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg hover:bg-gray-900">
            <i class="fas fa-user-edit mr-2"></i>
            Edit Profile
          </button>
        </div>

        <!-- Profile Info Card -->
        <div class="bg-white/90 rounded-2xl shadow-lg overflow-hidden border border-gray-100 backdrop-blur-sm">
          <div class="grid md:grid-cols-2 gap-8 p-8">
            <!-- Personal Details -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                <i class="fas fa-user-circle mr-2 text-yellow-500"></i>
                Personal Details
              </h3>
              <div class="space-y-6">
                <div class="relative group p-4 bg-gray-50/80 rounded-xl hover:bg-white/90 transition-all duration-300">
                  <label class="text-sm text-gray-500 mb-1 block">Full Name</label>
                  <p class="text-lg font-semibold text-gray-800"><%= user.name %></p>
                </div>
                
                <div class="relative group p-4 bg-gray-50/80 rounded-xl hover:bg-white/90 transition-all duration-300">
                  <label class="text-sm text-gray-500 mb-1 block">Email Address</label>
                  <p class="text-lg font-semibold text-gray-800"><%= user.email %></p>
                </div>

                <div class="relative group p-4 bg-gray-50/80 rounded-xl hover:bg-white/90 transition-all duration-300">
                  <label class="text-sm text-gray-500 mb-1 block">Phone Number</label>
                  <p class="text-lg font-semibold text-gray-800"><%= user.phone || "Not provided" %></p>
                </div>
              </div>
            </div>

            <!-- Security Section -->
            <div class="bg-gray-50/80 rounded-2xl p-6 hover:bg-white/90 transition-all duration-300">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-gray-900 flex items-center">
                  <i class="fas fa-shield-alt mr-2 text-yellow-500"></i>
                  Security Settings
                </h3>
                <span class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">Protected</span>
              </div>
              
              <div class="space-y-4">
                <% if (!user.googleId) { %>
                  <div class="bg-white rounded-xl p-4 shadow-sm hover:shadow-md transition-all duration-300">
                    <div class="flex items-center justify-between">
                      <div>
                        <label class="text-sm text-gray-500 mb-1 block">Password</label>
                        <p class="text-lg font-semibold text-gray-800">••••••••</p>
                      </div>
                      <button id="changePasswordBtn" 
                              class="flex items-center px-4 py-2 text-sm bg-gray-800 hover:bg-gray-900 text-white rounded-lg transition-all duration-300">
                        <i class="fas fa-key mr-2"></i>
                        Change
                      </button>
                    </div>
                  </div>
                <% } else { %>
                  <div class="bg-white rounded-xl p-4 shadow-sm">
                    <div class="flex items-center space-x-3">
                      <i class="fab fa-google text-blue-500"></i>
                      <p class="text-sm text-gray-600">Signed in with Google Account</p>
                    </div>
                  </div>
                <% } %>

                <div class="bg-white rounded-xl p-4 shadow-sm">
                    <div class="flex items-center space-x-3">
                        <i class="fas fa-shield-alt text-gray-400"></i>
                        <p class="text-sm text-gray-600">Your account is protected with two-factor authentication</p>
                    </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Address Section -->
      <div class="mb-10">
        <div class="flex justify-between items-center mb-8">
          <div>
            <h2 class="text-2xl font-bold text-gray-900 mb-2">My Addresses</h2>
            <p class="text-gray-600 text-sm">Manage your shipping addresses</p>
          </div>
          <button id="openModalBtn" 
                  class="flex items-center px-6 py-2.5 bg-gray-800 hover:bg-gray-900 text-white rounded-lg transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg">
            <i class="fas fa-plus mr-2"></i>
            Add New Address
          </button>
        </div>

        <!-- Address Grid -->
        <div class="grid md:grid-cols-2 gap-6">
          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach(addressItem => { %>
              <% addressItem.address.forEach(addr => { %>
                <% if (!addr.isDelete) { %>
                  <div class="bg-white/90 rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 overflow-hidden group backdrop-blur-sm">
                    <div class="p-6">
                      <div class="flex justify-between items-start mb-4">
                        <span class="px-4 py-1.5 bg-gray-100 text-gray-800 rounded-full text-sm font-medium">
                          <%= addr.addressType %>
                        </span>
                        <% if (addr.isDefault) { %>
                          <span class="px-4 py-1.5 bg-green-100 text-green-800 rounded-full text-sm font-medium">Default</span>
                        <% } %>
                      </div>

                      <h3 class="text-xl font-bold text-gray-900 mb-3"><%= addr.name %></h3>
                      <p class="text-gray-600 leading-relaxed mb-4">
                        <%= addr.landMark %><br>
                        <%= addr.city %>, <%= addr.state %> - <%= addr.pincode %>
                      </p>

                      <div class="flex justify-end items-center space-x-4 pt-4 border-t border-gray-100">
                        <button onclick="deleteAddress('<%= addr._id %>')" 
                                class="text-red-500 hover:text-red-600 font-medium text-sm transition-colors duration-300">
                          <i class="fas fa-trash-alt mr-1"></i> Remove
                        </button>
                        <button onclick="editAddress('<%= JSON.stringify(addr) %>')" 
                                class="text-gray-700 hover:text-gray-900 font-medium text-sm transition-colors duration-300">
                          <i class="fas fa-edit mr-1"></i> Edit
                        </button>
                      </div>
                    </div>
                  </div>
                <% } %>
              <% }) %>
            <% }) %>
          <% } else { %>
            <div class="col-span-2 bg-white/90 rounded-2xl shadow-lg p-8 text-center backdrop-blur-sm">
              <p class="text-gray-500">No addresses available yet</p>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Edit Profile Modal -->
<div id="editProfileModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-bold">Edit Profile</h2>
      <button class="closeModal text-gray-500 hover:text-black text-xl">&times;</button>
    </div>
    <form id="editProfileForm">
      <div class="mb-4">
        <label for="editName" class="block text-sm font-medium">Name</label>
        <input type="text" id="editName" name="name" value="<%= user.name %>" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-gray-500 focus:border-gray-500" required>
        <div id="nameError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div class="mb-4">
        <label for="editPhone" class="block text-sm font-medium">Phone Number</label>
        <input type="tel" id="editPhone" name="phone" value="<%= user.phone %>" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-gray-500 focus:border-gray-500" required>
        <div id="phoneError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div id="editProfileError" class="text-red-500 text-sm mb-4 hidden"></div>
      <div class="flex justify-end gap-2">
        <button type="submit" class="bg-gray-800 hover:bg-gray-900 text-white font-bold py-2 px-4 rounded">Save Changes</button>
        <button type="button" class="closeModal bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Change Password Modal -->
<div id="changePasswordModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-bold">Change Password</h2>
      <button class="closeModal text-gray-500 hover:text-black text-xl">&times;</button>
    </div>
    <form id="changePasswordForm">
      <div class="mb-4">
        <label for="currentPassword" class="block text-sm font-medium">Current Password</label>
        <input type="password" id="currentPassword" name="currentPassword" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-gray-500 focus:border-gray-500" required>
        <div id="currentPasswordError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div class="mb-4">
        <label for="newPassword" class="block text-sm font-medium">New Password</label>
        <input type="password" id="newPassword" name="newPassword" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-gray-500 focus:border-gray-500" required>
        <div id="newPasswordError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div class="mb-4">
        <label for="confirmPassword" class="block text-sm font-medium">Confirm New Password</label>
        <input type="password" id="confirmPassword" name="confirmPassword" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-gray-500 focus:border-gray-500" required>
        <div id="confirmPasswordError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div id="passwordFormError" class="text-red-500 text-sm mb-4 hidden"></div>
      <div class="flex justify-end gap-2">
        <button type="submit" class="bg-gray-800 hover:bg-gray-900 text-white font-bold py-2 px-4 rounded">Update Password</button>
        <button type="button" class="closeModal bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Modal -->
<div id="addAddressModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white rounded-2xl shadow-2xl w-full max-w-lg transform transition-all">
    <!-- Modal Header -->
    <div class="p-6 border-b border-gray-100">
      <div class="flex justify-between items-center">
        <h2 class="text-2xl font-bold text-gray-800">Add New Address</h2>
        <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors duration-300">
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Modal Body -->
    <div class="p-6">
      <form id="addressForm" class="space-y-5">
        <!-- Address Type -->
        <div>
          <label for="addressType" class="block text-sm font-medium text-gray-700 mb-1">Address Type</label>
          <select id="addressType" name="addressType" required
            class="w-full px-4 py-2.5 rounded-xl border border-gray-200 focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-300 bg-gray-50 hover:bg-white">
            <option value="" disabled selected>Select type</option>
            <option value="Home">Home</option>
            <option value="Work">Work</option>
            <option value="Office">Office</option>
            <option value="Other">Other</option>
          </select>
          <div id="addressTypeError" class="text-red-500 text-sm mt-1 hidden"></div>
        </div>

        <!-- Name -->
        <div class="mb-4">
          <label for="name" class="block text-sm font-medium text-gray-700 mb-1">Full Name</label>
          <input type="text" 
                 id="name" 
                 name="name" 
                 required 
                 minlength="3" 
                 maxlength="50"
                 class="w-full px-4 py-2.5 rounded-xl border border-gray-200 focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-300 bg-gray-50 hover:bg-white"
                 placeholder="Enter your full name">
          <div id="nameError" class="text-red-500 text-sm mt-1" style="display: none;"></div>
        </div>

        <!-- City & State Grid -->
        <div class="grid grid-cols-2 gap-4">
          <div>
            <label for="city" class="block text-sm font-medium text-gray-700 mb-1">City</label>
            <input type="text" id="city" name="city" required minlength="2" maxlength="100"
              class="w-full px-4 py-2.5 rounded-xl border border-gray-200 focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-300 bg-gray-50 hover:bg-white"
              placeholder="Enter city">
            <div id="cityError" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
          <div>
            <label for="state" class="block text-sm font-medium text-gray-700 mb-1">State</label>
            <input type="text" id="state" name="state" required
              class="w-full px-4 py-2.5 rounded-xl border border-gray-200 focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-300 bg-gray-50 hover:bg-white"
              placeholder="Enter state">
            <div id="stateError" class="text-red-500 text-sm mt-1 hidden"></div>
          </div>
        </div>

        <!-- Landmark -->
        <div>
          <label for="landMark" class="block text-sm font-medium text-gray-700 mb-1">Landmark</label>
          <input type="text" id="landMark" name="landMark" required maxlength="100"
            class="w-full px-4 py-2.5 rounded-xl border border-gray-200 focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-300 bg-gray-50 hover:bg-white"
            placeholder="Enter a nearby landmark">
          <div id="landMarkError" class="text-red-500 text-sm mt-1 hidden"></div>
        </div>

        <!-- Pincode -->
        <div>
          <label for="pincode" class="block text-sm font-medium text-gray-700 mb-1">Pincode</label>
          <input type="number" id="pincode" name="pincode" required min="100000" max="999999"
            class="w-full px-4 py-2.5 rounded-xl border border-gray-200 focus:ring-2 focus:ring-gray-500 focus:border-transparent transition-all duration-300 bg-gray-50 hover:bg-white"
            placeholder="Enter 6-digit pincode">
          <div id="pincodeError" class="text-red-500 text-sm mt-1 hidden"></div>
        </div>

        <!-- Default Address Checkbox -->
        <div class="flex items-center">
          <label class="flex items-center space-x-3 cursor-pointer group">
            <input type="checkbox" id="isDefault" onchange="handleDefaultAddressCheckbox()"
              class="w-5 h-5 rounded-lg border-gray-300 text-gray-500 focus:ring-gray-500 focus:ring-offset-0">
            <span class="text-sm font-medium text-gray-600 group-hover:text-gray-800 transition-colors duration-300">
              Set as Default Address
            </span>
          </label>
        </div>

        <!-- General Form Error -->
        <div id="formError" class="text-red-500 text-sm hidden"></div>

        <!-- Action Buttons -->
        <div class="flex justify-end space-x-3 pt-4 border-t border-gray-100">
          <button type="button" id="cancelModalBtn"
            class="px-6 py-2.5 rounded-xl border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition-all duration-300 transform hover:scale-105">
            Cancel
          </button>
          <button type="submit"
            class="px-6 py-2.5 rounded-xl bg-gray-800 text-white font-medium hover:bg-gray-900 transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg">
            Save Address
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

  </div>


  <script>

// Get modal elements
const modal = document.getElementById("addAddressModal");
const openModalBtn = document.getElementById("openModalBtn");
const closeModalBtn = document.getElementById("closeModalBtn");
const cancelModalBtn = document.getElementById("cancelModalBtn");
const addressForm = document.getElementById("addressForm");

// Open modal
openModalBtn.addEventListener("click", () => {
  modal.classList.remove("hidden");
  addressForm.reset(); // Reset the form fields when opening the modal
});

// Close modal
[closeModalBtn, cancelModalBtn].forEach((btn) =>
  btn.addEventListener("click", () => {
    modal.classList.add("hidden");
  })
);

// Close modal if clicked outside
window.addEventListener("click", (event) => {
  if (event.target === modal) {
    modal.classList.add("hidden");
  }
});

// Update the form submission event listener
document.getElementById('addressForm').addEventListener('submit', async function(event) {
    event.preventDefault();
    
    // Reset all error messages
    const errorElements = document.querySelectorAll('[id$="Error"]');
    errorElements.forEach(element => {
        element.classList.add('hidden');
        element.textContent = '';
    });

    // Check if this is an edit operation
    const addressIdInput = this.querySelector('input[name="addressId"]');
    const isEditMode = !!addressIdInput;

    // Validate form
    if (validateForm(event)) {
        try {
            // Collect form data
            const formData = {
                addressType: document.getElementById('addressType').value,
                name: document.getElementById('name').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                landMark: document.getElementById('landMark').value,
                pincode: document.getElementById('pincode').value,
                isDefault: document.getElementById('isDefault').checked
            };

            // If in edit mode, add the addressId
            if (isEditMode) {
                formData.addressId = addressIdInput.value;
            }

            // Send to appropriate endpoint based on mode
            const url = isEditMode ? '/edit-address' : '/add-address';
            const response = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (response.ok) {
                // Success with custom design
                Swal.fire({
                    icon: 'success',
                    title: isEditMode ? 'Address Updated!' : 'Address Added!',
                    text: isEditMode ? 'Your address has been updated successfully.' : 'Your address has been added successfully.',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#1F2937', // Tailwind gray-800
                    customClass: {
                        popup: 'rounded-xl',
                        title: 'text-xl font-bold text-gray-800',
                        htmlContainer: 'text-gray-600',
                        confirmButton: 'px-6 py-2.5 rounded-lg text-white transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg'
                    },
                    showClass: {
                        popup: 'animate__animated animate__fadeInDown'
                    },
                    hideClass: {
                        popup: 'animate__animated animate__fadeOutUp'
                    }
                }).then(() => {
                    location.reload();
                });
            } else {
                throw new Error(result.message || 'Operation failed');
            }
        } catch (error) {
            console.error('Error:', error);
            document.getElementById('formError').textContent = error.message || 'Something went wrong. Please try again.';
            document.getElementById('formError').classList.remove('hidden');
        }
    }
});

// Reset form and errors when modal is closed
function resetFormAndErrors() {
    document.getElementById('addressForm').reset();
    const errorElements = document.querySelectorAll('[id$="Error"]');
    errorElements.forEach(element => {
        element.classList.add('hidden');
        element.textContent = '';
    });
}

// Add reset to close and cancel buttons
document.getElementById('closeModalBtn').addEventListener('click', resetFormAndErrors);
document.getElementById('cancelModalBtn').addEventListener('click', resetFormAndErrors);

window.addEventListener("load", () => {
  const addressAdded = localStorage.getItem("addressAdded");

  if (addressAdded === "true") {
    showNotification("Address added successfully!", "bg-green-500");
  } else if (addressAdded === "error") {
    showNotification("Something went wrong. Please try again.", "bg-red-500");
  }

  // Clear the flag after showing the notification
  localStorage.removeItem("addressAdded");
});

// Function to show the notification
function showNotification(message, bgColor) {
  const notification = document.getElementById("notification");
  if (!notification) {
    console.error("Notification element not found");
    return;
  }
  
  // Remove any existing color classes
  notification.className = "fixed top-4 right-4 px-4 py-2 rounded-lg text-white transform transition-all duration-300";
  
  // Add the new color class and show the notification
  notification.classList.add(bgColor);
  notification.textContent = message;
  notification.classList.remove("hidden");
  
  // Hide the notification after 4 seconds
  setTimeout(() => {
    notification.classList.add("hidden");
  }, 4000);
}

// Modal handling
const editProfileModal = document.getElementById('editProfileModal');
const changePasswordModal = document.getElementById('changePasswordModal');
const editProfileBtn = document.getElementById('editProfileBtn');
const changePasswordBtn = document.getElementById('changePasswordBtn');
const closeButtons = document.querySelectorAll('.closeModal');

// Open modals
editProfileBtn.addEventListener('click', () => editProfileModal.classList.remove('hidden'));
changePasswordBtn.addEventListener('click', () => changePasswordModal.classList.remove('hidden'));

// Close modals
closeButtons.forEach(button => {
  button.addEventListener('click', () => {
    editProfileModal.classList.add('hidden');
    changePasswordModal.classList.add('hidden');
  });
});

// Edit Profile Form Validation and Submission
document.getElementById('editProfileForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  // Reset error messages
  document.querySelectorAll('.text-red-500').forEach(el => el.classList.add('hidden'));
  
  const formData = {
    name: document.getElementById('editName').value.trim(),
    phone: document.getElementById('editPhone').value.trim()
  };

  let hasError = false;

  // Name validation
  if (!formData.name || formData.name.length < 2) {
    document.getElementById('nameError').textContent = "Name must be at least 2 characters long";
    document.getElementById('nameError').classList.remove('hidden');
    hasError = true;
  }

  // Phone validation
  if (!formData.phone || !/^\d{10}$/.test(formData.phone)) {
    document.getElementById('phoneError').textContent = "Please enter a valid 10-digit phone number";
    document.getElementById('phoneError').classList.remove('hidden');
    hasError = true;
  }

  if (hasError) return;

  try {
    const response = await fetch('/update-profile', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });

    const data = await response.json();

    if (response.ok) {
      editProfileModal.classList.add('hidden');
      showNotification("Profile updated successfully!", "bg-green-500");
      setTimeout(() => location.reload(), 1500);
    } else {
      document.getElementById('editProfileError').textContent = data.message || "Failed to update profile";
      document.getElementById('editProfileError').classList.remove('hidden');
    }
  } catch (error) {
    document.getElementById('editProfileError').textContent = "Something went wrong. Please try again.";
    document.getElementById('editProfileError').classList.remove('hidden');
  }
});

// Change Password Form Validation and Submission
document.getElementById('changePasswordForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  // Reset error messages
  document.querySelectorAll('.text-red-500').forEach(el => el.classList.add('hidden'));
  
  const currentPassword = document.getElementById('currentPassword').value;
  const newPassword = document.getElementById('newPassword').value;
  const confirmPassword = document.getElementById('confirmPassword').value;

  let hasError = false;

  // Password validation
  if (!currentPassword) {
    document.getElementById('currentPasswordError').textContent = "Current password is required";
    document.getElementById('currentPasswordError').classList.remove('hidden');
    hasError = true;
  }

  if (newPassword.length < 6) {
    document.getElementById('newPasswordError').textContent = "Password must be at least 6 characters long";
    document.getElementById('newPasswordError').classList.remove('hidden');
    hasError = true;
  }

  if (newPassword !== confirmPassword) {
    document.getElementById('confirmPasswordError').textContent = "Passwords don't match";
    document.getElementById('confirmPasswordError').classList.remove('hidden');
    hasError = true;
  }

  if (hasError) return;

  try {
    const response = await fetch('/change-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ currentPassword, newPassword })
    });

    const data = await response.json();

    if (response.ok) {
      changePasswordModal.classList.add('hidden');
      document.getElementById('changePasswordForm').reset();
      showNotification("Password changed successfully!", "bg-green-500");
    } else {
      document.getElementById('passwordFormError').textContent = data.message || "Failed to change password";
      document.getElementById('passwordFormError').classList.remove('hidden');
    }
  } catch (error) {
    document.getElementById('passwordFormError').textContent = "Something went wrong. Please try again.";
    document.getElementById('passwordFormError').classList.remove('hidden');
  }
});

// Update notification position styles
function showNotification(message, bgColor) {
  const notification = document.getElementById("notification");
  notification.textContent = message;
  notification.classList.remove("hidden");
  notification.classList.add("show", bgColor);
  
  setTimeout(() => {
    notification.classList.remove("show");
    notification.classList.add("hidden");
  }, 4000);
}

// Delete address function
async function deleteAddress(addressId) {
    try {
        const result = await Swal.fire({
            title: 'Are you sure?',
            text: "You want to remove this address?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, remove it!'
        });

        if (result.isConfirmed) {
            const response = await fetch('/delete-address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ addressId })
            });

            const data = await response.json();

            if (response.ok) {
                await Swal.fire(
                    'Deleted!',
                    'Address has been removed.',
                    'success'
                );
                location.reload();
            } else {
                await Swal.fire(
                    'Error!',
                    data.message || 'Failed to remove address',
                    'error'
                );
            }
        }
    } catch (error) {
        console.error('Error:', error);
        await Swal.fire(
            'Error!',
            'Something went wrong',
            'error'
        );
    }
}

// DOM Content Loaded Event
document.addEventListener('DOMContentLoaded', () => {
    // Your other initialization code here
    console.log('DOM fully loaded');
});

// Update your existing validateField function
function validateField(fieldId) {
    const field = document.getElementById(fieldId);
    const errorDiv = document.getElementById(`${fieldId}Error`);
    const value = field.value.trim();

    // Reset error state
    errorDiv.classList.add('hidden');
    field.classList.remove('border-red-500');
    field.classList.add('border-gray-200');

    // Validation rules
    if (!value) {
        errorDiv.textContent = `${fieldId.charAt(0).toUpperCase() + fieldId.slice(1)} is required`;
        errorDiv.classList.remove('hidden');
        field.classList.add('border-red-500');
        return false;
    }

    // Common validation for fields requiring 3 characters and letters only
    if (['name', 'city', 'state', 'landMark'].includes(fieldId)) {
        if (value.length < 3) {
            errorDiv.textContent = `${fieldId.charAt(0).toUpperCase() + fieldId.slice(1)} must be at least 3 characters`;
            errorDiv.classList.remove('hidden');
            field.classList.add('border-red-500');
            return false;
        }
        
        if (!/^[a-zA-Z\s]+$/.test(value)) {
            errorDiv.textContent = `${fieldId.charAt(0).toUpperCase() + fieldId.slice(1)} should only contain letters`;
            errorDiv.classList.remove('hidden');
            field.classList.add('border-red-500');
            return false;
        }
    }

    // Special validation for pincode
    if (fieldId === 'pincode') {
        if (!/^\d{6}$/.test(value)) {
            errorDiv.textContent = 'Please enter a valid 6-digit pincode';
            errorDiv.classList.remove('hidden');
            field.classList.add('border-red-500');
            return false;
        }
    }

    return true;
}

// Make sure these event listeners are properly attached
document.addEventListener('DOMContentLoaded', function() {
    const fields = ['name', 'city', 'state', 'landMark', 'pincode'];
    const form = document.getElementById('addressForm');

    // Add validation on input
    fields.forEach(fieldId => {
        const field = document.getElementById(fieldId);
        if (field) {
            field.addEventListener('input', () => validateField(fieldId));
            field.addEventListener('blur', () => validateField(fieldId));
        }
    });

    // Validate all fields on form submit
    form.addEventListener('submit', function(event) {
        event.preventDefault();
        
        let isValid = true;
        fields.forEach(fieldId => {
            if (!validateField(fieldId)) {
                isValid = false;
            }
        });

        if (!isValid) {
            return false;
        }

        // Continue with form submission if all validations pass
        // Your existing form submission code here...
    });
});

// Function to handle edit address
function editAddress(addressData) {
    try {
        // Parse the address data if it's a string
        const address = typeof addressData === 'string' ? JSON.parse(addressData) : addressData;
        
        // Get the modal and populate fields
        const modal = document.getElementById('addAddressModal');
        const form = document.getElementById('addressForm');
        
        // Update modal title
        modal.querySelector('h2').textContent = 'Edit Address';
        
        // Populate form fields
        document.getElementById('addressType').value = address.addressType;
        document.getElementById('name').value = address.name;
        document.getElementById('city').value = address.city;
        document.getElementById('state').value = address.state;
        document.getElementById('landMark').value = address.landMark;
        document.getElementById('pincode').value = address.pincode;
        document.getElementById('isDefault').checked = address.isDefault;
        
        // Add address ID to form
        const addressIdInput = document.createElement('input');
        addressIdInput.type = 'hidden';
        addressIdInput.name = 'addressId';
        addressIdInput.value = address._id;
        form.appendChild(addressIdInput);
        
        // Show modal
        modal.classList.remove('hidden');
        
        // Update form submission handler
        form.onsubmit = async function(e) {
            e.preventDefault();
            
            const formData = {
                addressId: address._id,
                addressType: document.getElementById('addressType').value,
                name: document.getElementById('name').value,
                city: document.getElementById('city').value,
                state: document.getElementById('state').value,
                landMark: document.getElementById('landMark').value,
                pincode: document.getElementById('pincode').value,
                isDefault: document.getElementById('isDefault').checked
            };

            try {
                const response = await fetch('/edit-address', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(formData)
                });

                const result = await response.json();

                if (result.success) {
                    // Show success message
                    Swal.fire({
                        icon: 'success',
                        title: 'Success!',
                        text: 'Address updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        location.reload();
                    });
                } else {
                    throw new Error(result.message);
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: error.message || 'Failed to update address'
                });
            }
        };
    } catch (error) {
        console.error('Error in editAddress:', error);
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load address details'
        });
    }
}

// Reset form when modal is closed
document.getElementById('closeModalBtn').addEventListener('click', () => {
    const form = document.getElementById('addressForm');
    form.reset();
    form.onsubmit = null; // Remove custom submit handler
    document.querySelector('#addAddressModal h2').textContent = 'Add New Address';
    const addressIdInput = form.querySelector('input[name="addressId"]');
    if (addressIdInput) addressIdInput.remove();
});

  </script>
  </div>
</body>
</html>
