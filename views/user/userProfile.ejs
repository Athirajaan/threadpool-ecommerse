<%- include('../partials/user/userheader') %> 
<%- include('../partials/user/userProfile') %>

<!-- Main Content -->
<main class="flex-grow p-6 bg-gradient-to-br from-slate-50 via-white to-slate-50 ml-64">
  <div class="max-w-5xl mx-auto px-4 flex justify-center">
    <div class="w-full max-w-4xl">
      <!-- Profile Overview Section -->
      <div class="mb-10">
        <div class="flex justify-between items-center mb-6">
          <h2 class="text-2xl font-bold text-gray-900">Profile Overview</h2>
          <!-- Keeping original edit button with same ID -->
          <button id="editProfileBtn" class="flex items-center px-6 py-2.5  rounded-lg transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg">
            <i class="fas fa-user-edit mr-2"></i>
            Edit Profile
          </button>
        </div>

        <!-- Profile Info Card -->
        <div class="bg-white rounded-2xl shadow-lg overflow-hidden border border-gray-100">
          <div class="grid md:grid-cols-2 gap-8 p-8">
            <!-- Personal Details -->
            <div class="space-y-4">
              <h3 class="text-lg font-semibold text-gray-900 mb-4">Personal Details</h3>
              <div class="space-y-6">
                <div class="relative group p-4 bg-gray-50 rounded-xl">
                  <label class="text-sm text-gray-500 mb-1 block">Full Name</label>
                  <p class="text-lg font-semibold text-gray-800"><%= user.name %></p>
                </div>
                
                <div class="relative group p-4 bg-gray-50 rounded-xl">
                  <label class="text-sm text-gray-500 mb-1 block">Email Address</label>
                  <p class="text-lg font-semibold text-gray-800"><%= user.email %></p>
                </div>

                <div class="relative group p-4 bg-gray-50 rounded-xl">
                  <label class="text-sm text-gray-500 mb-1 block">Phone Number</label>
                  <p class="text-lg font-semibold text-gray-800"><%= user.phone || "Not provided" %></p>
                </div>
              </div>
            </div>

            <!-- Security Section -->
            <div class="bg-gray-50 rounded-2xl p-6">
              <div class="flex items-center justify-between mb-6">
                <h3 class="text-lg font-semibold text-gray-900">Security Settings</h3>
                <span class="px-3 py-1 bg-green-100 text-green-700 rounded-full text-sm font-medium">Protected</span>
              </div>
              
              <div class="space-y-4">
                <div class="bg-white rounded-xl p-4 shadow-sm">
                  <div class="flex items-center justify-between">
                    <div>
                      <label class="text-sm text-gray-500 mb-1 block">Password</label>
                      <p class="text-lg font-semibold text-gray-800">••••••••</p>
                    </div>
                    <!-- Keeping original change password button with same ID -->
                    <button id="changePasswordBtn" class="flex items-center px-4 py-2 text-sm bg-gray-800 hover:bg-gray-900 text-white rounded-lg transition-all duration-300">
                      <i class="fas fa-key mr-2"></i>
                      Change
                    </button>
                  </div>
                 
                </div>

                <div class="bg-white rounded-xl p-4 shadow-sm">
                  <div class="flex items-center space-x-3">
                    <i class="fas fa-shield-alt text-gray-400"></i>
                    <p class="text-sm text-gray-600">Your account is protected with two-factor authentication</p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Address Section -->
      <div class="mb-10">
        <div class="flex justify-between items-center mb-8">
          <h2 class="text-2xl font-bold text-gray-900">My Addresses</h2>
          <!-- Keeping original add address button with same ID -->
          <button id="openModalBtn" class="flex items-center px-6 py-2.5 bg-gray-800 hover:bg-gray-900 text-white rounded-lg transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg">
            <i class="fas fa-plus mr-2"></i>
            Add New Address
          </button>
        </div>

        <!-- Address Grid -->
        <div class="grid md:grid-cols-2 gap-6">
          <% if (addresses && addresses.length > 0) { %>
            <% addresses.forEach(addressItem => { %>
              <% const address = addressItem.address[0]; %>
              <div class="bg-white rounded-2xl shadow-lg hover:shadow-xl transition-all duration-300 border border-gray-100 overflow-hidden group">
                <div class="p-6">
                  <div class="flex justify-between items-start mb-4">
                    <span class="px-4 py-1.5 bg-yellow-100 text-yellow-800 rounded-full text-sm font-medium">
                      <%= address.addressType %>
                    </span>
                    <% if (address.isDefault) { %>
                      <span class="px-4 py-1.5 bg-green-100 text-green-800 rounded-full text-sm font-medium">Default</span>
                    <% } %>
                  </div>

                  <h3 class="text-xl font-bold text-gray-900 mb-3"><%= address.name %></h3>
                  <p class="text-gray-600 leading-relaxed mb-4">
                    <%= address.landMark %><br>
                    <%= address.city %>, <%= address.state %> - <%= address.pincode %>
                  </p>

                  <div class="flex justify-end items-center space-x-4 pt-4 border-t border-gray-100">
                    <button class="text-red-500 hover:text-red-600 font-medium text-sm transition-colors duration-300">
                      <i class="fas fa-trash-alt mr-1"></i> Remove
                    </button>
                    <button class="text-blue-500 hover:text-blue-600 font-medium text-sm transition-colors duration-300">
                      <i class="fas fa-edit mr-1"></i> Edit
                    </button>
                  </div>
                </div>
              </div>
            <% }) %>
          <% } else { %>
            <div class="col-span-2 bg-white rounded-2xl shadow-lg p-8 text-center">
              <p class="text-gray-500">No addresses available yet</p>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>
</main>

<!-- Edit Profile Modal -->
<div id="editProfileModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-bold">Edit Profile</h2>
      <button class="closeModal text-gray-500 hover:text-black text-xl">&times;</button>
    </div>
    <form id="editProfileForm">
      <div class="mb-4">
        <label for="editName" class="block text-sm font-medium">Name</label>
        <input type="text" id="editName" name="name" value="<%= user.name %>" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-yellow-500 focus:border-yellow-500" required>
        <div id="nameError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div class="mb-4">
        <label for="editPhone" class="block text-sm font-medium">Phone Number</label>
        <input type="tel" id="editPhone" name="phone" value="<%= user.phone %>" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-yellow-500 focus:border-yellow-500" required>
        <div id="phoneError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div id="editProfileError" class="text-red-500 text-sm mb-4 hidden"></div>
      <div class="flex justify-end gap-2">
        <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded">Save Changes</button>
        <button type="button" class="closeModal bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Change Password Modal -->
<div id="changePasswordModal" class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden">
  <div class="bg-white rounded-lg shadow-lg w-full max-w-md p-6">
    <div class="flex justify-between items-center mb-4">
      <h2 class="text-xl font-bold">Change Password</h2>
      <button class="closeModal text-gray-500 hover:text-black text-xl">&times;</button>
    </div>
    <form id="changePasswordForm">
      <div class="mb-4">
        <label for="currentPassword" class="block text-sm font-medium">Current Password</label>
        <input type="password" id="currentPassword" name="currentPassword" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-yellow-500 focus:border-yellow-500" required>
        <div id="currentPasswordError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div class="mb-4">
        <label for="newPassword" class="block text-sm font-medium">New Password</label>
        <input type="password" id="newPassword" name="newPassword" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-yellow-500 focus:border-yellow-500" required>
        <div id="newPasswordError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div class="mb-4">
        <label for="confirmPassword" class="block text-sm font-medium">Confirm New Password</label>
        <input type="password" id="confirmPassword" name="confirmPassword" 
          class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:ring-yellow-500 focus:border-yellow-500" required>
        <div id="confirmPasswordError" class="text-red-500 text-sm mt-1 hidden"></div>
      </div>
      <div id="passwordFormError" class="text-red-500 text-sm mb-4 hidden"></div>
      <div class="flex justify-end gap-2">
        <button type="submit" class="bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded">Update Password</button>
        <button type="button" class="closeModal bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 rounded">Cancel</button>
      </div>
    </form>
  </div>
</div>

<!-- Modal -->
<div
  id="addAddressModal"
  class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 hidden"
>
  <div class="bg-white rounded-xl shadow-2xl w-full max-w-lg p-8">
    <div class="flex justify-between items-center border-b pb-4">
      <h2 class="text-2xl font-bold text-gray-800">Add Address</h2>
      <button id="closeModalBtn" class="text-gray-400 hover:text-gray-600 transition-colors">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    <form id="addressForm" class="mt-6 space-y-6">
      <!-- Address Type -->
      <div>
        <label for="addressType" class="block text-sm font-semibold text-gray-700">Address Type*</label>
        <select
          id="addressType"
          name="addressType"
          class="mt-2 block w-full rounded-lg border-gray-200 shadow-sm focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
          required
        >
          <option value="" disabled selected>Select type</option>
          <option value="Home">Home</option>
          <option value="Work">Work</option>
          <option value="Office">Office</option>
          <option value="Other">Other</option>
        </select>
      </div>

      <!-- Name -->
      <div>
        <label for="name" class="block text-sm font-semibold text-gray-700">Name*</label>
        <input
          type="text"
          id="name"
          name="name"
          class="mt-2 block w-full rounded-lg border-gray-200 shadow-sm focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
          placeholder="Enter your full name"
          minlength="3"
          maxlength="50"
          required
        />
      </div>

      <div class="grid grid-cols-2 gap-4">
        <!-- City -->
        <div>
          <label for="city" class="block text-sm font-semibold text-gray-700">City*</label>
          <input
            type="text"
            id="city"
            name="city"
            class="mt-2 block w-full rounded-lg border-gray-200 shadow-sm focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
            placeholder="Enter city"
            minlength="2"
            maxlength="100"
            required
          />
        </div>

        <!-- State -->
        <div>
          <label for="state" class="block text-sm font-semibold text-gray-700">State*</label>
          <input
            type="text"
            id="state"
            name="state"
            class="mt-2 block w-full rounded-lg border-gray-200 shadow-sm focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
            placeholder="Enter state"
            required
          />
        </div>
      </div>

      <!-- Landmark -->
      <div>
        <label for="landMark" class="block text-sm font-semibold text-gray-700">Landmark*</label>
        <input
          type="text"
          id="landMark"
          name="landMark"
          class="mt-2 block w-full rounded-lg border-gray-200 shadow-sm focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
          placeholder="Enter a nearby landmark"
          maxlength="100"
          required
        />
      </div>

      <!-- Pincode -->
      <div>
        <label for="pincode" class="block text-sm font-semibold text-gray-700">Pincode*</label>
        <input
          type="number"
          id="pincode"
          name="pincode"
          class="mt-2 block w-full rounded-lg border-gray-200 shadow-sm focus:ring-2 focus:ring-yellow-400 focus:border-transparent"
          placeholder="Enter 6-digit pincode"
          min="100000"
          max="999999"
          required
        />
      </div>

      <div class="flex items-center">
        <label class="flex items-center space-x-3 cursor-pointer">
          <input
            type="checkbox"
            id="isDefault"
            class="w-5 h-5 rounded border-gray-300 text-yellow-500 focus:ring-yellow-400"
            onchange="handleDefaultAddressCheckbox()"
          />
          <span class="text-sm font-medium text-gray-700">Set as Default Address</span>
        </label>
      </div>

      <div id="error-message" class="text-red-500"></div>

      <!-- Buttons -->
      <div class="flex justify-end space-x-3 pt-4 border-t">
        <button
          type="button"
          id="cancelModalBtn"
          class="px-6 py-2.5 rounded-lg border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition-colors"
        >
          Cancel
        </button>
        <button
          type="submit"
          class="px-6 py-2.5 rounded-lg bg-yellow-500 text-white font-medium hover:bg-yellow-600 transition-colors"
        >
          Save Address
        </button>
      </div>
    </form>
  </div>
</div>

      
  </div>


  <script>

// Get modal elements
const modal = document.getElementById("addAddressModal");
const openModalBtn = document.getElementById("openModalBtn");
const closeModalBtn = document.getElementById("closeModalBtn");
const cancelModalBtn = document.getElementById("cancelModalBtn");
const addressForm = document.getElementById("addressForm");

// Open modal
openModalBtn.addEventListener("click", () => {
  modal.classList.remove("hidden");
  addressForm.reset(); // Reset the form fields when opening the modal
});

// Close modal
[closeModalBtn, cancelModalBtn].forEach((btn) =>
  btn.addEventListener("click", () => {
    modal.classList.add("hidden");
  })
);

// Close modal if clicked outside
window.addEventListener("click", (event) => {
  if (event.target === modal) {
    modal.classList.add("hidden");
  }
});

// Submit form
document.getElementById("addressForm").addEventListener("submit", async function(event) {
  event.preventDefault();  // Prevent the default form submission

  // Collect form data
  const formData = {
    addressType: document.getElementById("addressType").value,
    name: document.getElementById("name").value,
    city: document.getElementById("city").value,
    landMark: document.getElementById("landMark").value,
    state: document.getElementById("state").value,
    pincode: document.getElementById("pincode").value,
    isDefault: document.getElementById("isDefault").checked,
  };

  try {
    const response = await fetch("http://localhost:3000/add-address", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(formData),
    });

    const result = await response.json();

    if (response.ok) {
      // If successful, show a success message or update the UI
      localStorage.setItem("addressAdded", "true");
      // Optionally, close the modal here
      modal.classList.add("hidden");
      addressForm.reset(); // Reset the form fields after successful submission
    
    } else {
      // If there's an error, show an error message
      localStorage.setItem("addressAdded", "error");
    }
    location.reload()
  } catch (error) {
    console.error("Error:", error);
    localStorage.setItem("addressAdded", "error");
    location.reload();
  }
});

// Cancel button closes the modal without submitting
document.getElementById("cancelModalBtn").addEventListener("click", function() {
  modal.classList.add("hidden");
  addressForm.reset(); // Reset the form when canceling
});

window.addEventListener("load", () => {
  const addressAdded = localStorage.getItem("addressAdded");

  if (addressAdded === "true") {
    showNotification("Address added successfully!", "bg-green-500");
  } else if (addressAdded === "error") {
    showNotification("Something went wrong. Please try again.", "bg-red-500");
  }

  // Clear the flag after showing the notification
  localStorage.removeItem("addressAdded");
});

// Function to show the notification
function showNotification(message, bgColor) {
  const notification = document.getElementById("notification");
  notification.textContent = message;

  // Apply the background color using Tailwind
  notification.classList.remove("hidden");
  notification.classList.add("show", bgColor); // Dynamically add the color class

  // Show notification for 5 seconds (5000ms)
  setTimeout(() => {
    notification.classList.remove("show");
    notification.classList.add("hidden");
  }, 4000); // Change this to 5000ms for 5 seconds
}

// Modal handling
const editProfileModal = document.getElementById('editProfileModal');
const changePasswordModal = document.getElementById('changePasswordModal');
const editProfileBtn = document.getElementById('editProfileBtn');
const changePasswordBtn = document.getElementById('changePasswordBtn');
const closeButtons = document.querySelectorAll('.closeModal');

// Open modals
editProfileBtn.addEventListener('click', () => editProfileModal.classList.remove('hidden'));
changePasswordBtn.addEventListener('click', () => changePasswordModal.classList.remove('hidden'));

// Close modals
closeButtons.forEach(button => {
  button.addEventListener('click', () => {
    editProfileModal.classList.add('hidden');
    changePasswordModal.classList.add('hidden');
  });
});

// Edit Profile Form Validation and Submission
document.getElementById('editProfileForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  // Reset error messages
  document.querySelectorAll('.text-red-500').forEach(el => el.classList.add('hidden'));
  
  const formData = {
    name: document.getElementById('editName').value.trim(),
    phone: document.getElementById('editPhone').value.trim()
  };

  let hasError = false;

  // Name validation
  if (!formData.name || formData.name.length < 2) {
    document.getElementById('nameError').textContent = "Name must be at least 2 characters long";
    document.getElementById('nameError').classList.remove('hidden');
    hasError = true;
  }

  // Phone validation
  if (!formData.phone || !/^\d{10}$/.test(formData.phone)) {
    document.getElementById('phoneError').textContent = "Please enter a valid 10-digit phone number";
    document.getElementById('phoneError').classList.remove('hidden');
    hasError = true;
  }

  if (hasError) return;

  try {
    const response = await fetch('/update-profile', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(formData)
    });

    const data = await response.json();

    if (response.ok) {
      editProfileModal.classList.add('hidden');
      showNotification("Profile updated successfully!", "bg-green-500");
      setTimeout(() => location.reload(), 1500);
    } else {
      document.getElementById('editProfileError').textContent = data.message || "Failed to update profile";
      document.getElementById('editProfileError').classList.remove('hidden');
    }
  } catch (error) {
    document.getElementById('editProfileError').textContent = "Something went wrong. Please try again.";
    document.getElementById('editProfileError').classList.remove('hidden');
  }
});

// Change Password Form Validation and Submission
document.getElementById('changePasswordForm').addEventListener('submit', async (e) => {
  e.preventDefault();
  
  // Reset error messages
  document.querySelectorAll('.text-red-500').forEach(el => el.classList.add('hidden'));
  
  const currentPassword = document.getElementById('currentPassword').value;
  const newPassword = document.getElementById('newPassword').value;
  const confirmPassword = document.getElementById('confirmPassword').value;

  let hasError = false;

  // Password validation
  if (!currentPassword) {
    document.getElementById('currentPasswordError').textContent = "Current password is required";
    document.getElementById('currentPasswordError').classList.remove('hidden');
    hasError = true;
  }

  if (newPassword.length < 6) {
    document.getElementById('newPasswordError').textContent = "Password must be at least 6 characters long";
    document.getElementById('newPasswordError').classList.remove('hidden');
    hasError = true;
  }

  if (newPassword !== confirmPassword) {
    document.getElementById('confirmPasswordError').textContent = "Passwords don't match";
    document.getElementById('confirmPasswordError').classList.remove('hidden');
    hasError = true;
  }

  if (hasError) return;

  try {
    const response = await fetch('/change-password', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ currentPassword, newPassword })
    });

    const data = await response.json();

    if (response.ok) {
      changePasswordModal.classList.add('hidden');
      document.getElementById('changePasswordForm').reset();
      showNotification("Password changed successfully!", "bg-green-500");
    } else {
      document.getElementById('passwordFormError').textContent = data.message || "Failed to change password";
      document.getElementById('passwordFormError').classList.remove('hidden');
    }
  } catch (error) {
    document.getElementById('passwordFormError').textContent = "Something went wrong. Please try again.";
    document.getElementById('passwordFormError').classList.remove('hidden');
  }
});

// Update notification position styles
function showNotification(message, bgColor) {
  const notification = document.getElementById("notification");
  notification.textContent = message;
  notification.classList.remove("hidden");
  notification.classList.add("show", bgColor);
  
  setTimeout(() => {
    notification.classList.remove("show");
    notification.classList.add("hidden");
  }, 4000);
}

  </script>
  </div>
</body>
</html>
