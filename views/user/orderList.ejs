<%- include('../partials/user/userheader') %>
<%- include('../partials/user/userprofile') %>

<div class="ml-64 flex-1">
  <nav class="px-8 py-5">
    <ol class="flex items-center">
      <li class="flex items-center">
        <a href="/" class="text-xs uppercase tracking-wider text-gray-500 hover:text-gray-700 transition-colors duration-200">
          Home
        </a>
      </li>
      <li class="flex items-center">
        <span class="mx-3 inline-block">
          <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5l7 7-7 7"/>
          </svg>
        </span>
        <a href="/profile" class="text-xs uppercase tracking-wider text-gray-500 hover:text-gray-700 transition-colors duration-200">
          profile
        </a>
      </li>
      <li class="flex items-center">
        <span class="mx-3 inline-block">
          <svg class="w-4 h-4 text-gray-400" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M9 5l7 7-7 7"/>
          </svg>
        </span>
        <span class="text-xs uppercase tracking-wider text-gray-900 font-medium">
          Orders
        </span>
      </li>
    </ol>
  </nav>

  <!-- Rest of the content -->
  <div class="px-8 mb-24">
    <h1 class="text-2xl font-bold mb-2">Order History</h1>
    
    <div class="space-y-6">
      <% if (orders && orders.length > 0) { %>
        <% orders.forEach(order => { %>
          <div class="bg-white shadow-sm border border-gray-100 rounded-xl overflow-hidden">
            <!-- Order Header -->
            <div class="px-6 py-4 border-b bg-gray-50 flex justify-between items-center">
              <div class="flex items-center space-x-6">
                <div class="flex items-center">
                 
                  <span class="text-xs uppercase tracking-wider text-gray-500">Order ID&nbsp;</span>
                  <span class="font-mono text-sm font-medium text-gray-900"><%= order.orderId %></span>
                </div>
                <div class="flex items-center text-sm text-gray-500">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                  <!-- <span><%= new Date(order.orderDate).toLocaleDateString('en-US', { day: 'numeric', month: 'short', year: 'numeric' }) %></span> -->
                  <time datetime="<%= order.orderDate %>" class="text-sm font-medium text-gray-900">
                    <%= new Date(order.orderDate).toLocaleDateString('en-US', { 
                      day: 'numeric', 
                      month: 'long', 
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    }) %>
               </time>
                </div>
              </div>
              <div class="flex items-center space-x-3">
                <!-- Add Final Amount Display -->
                <div class="text-sm font-medium text-gray-900">
                  Total: ₹<%= order.finalAmount %>
                </div>
                <!-- View Details Button -->
                <button 
                  data-order="<%= encodeURIComponent(JSON.stringify(order)) %>"
                  onclick="showOrderDetails(this.dataset.order)" 
                  class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 hover:text-blue-600 border border-gray-200 hover:border-blue-500 rounded-md transition-all duration-200">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                  </svg>
                  View Details
                </button>

                <!-- Retry Payment Button - Only show if payment status is Failed -->
                <% if (order.paymentStatus === 'Failed') { %>
                  <button 
                    onclick="retryPayment('<%= order.orderId %>', <%= order.finalAmount %>)"
                    class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-white bg-red-600 hover:bg-red-700 border border-transparent rounded-md transition-all duration-200 shadow-sm hover:shadow-md"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    Retry Payment
                  </button>
                <% } %>
              </div>
            </div>

            <!-- Order Items -->
            <div class="divide-y divide-gray-100">
              <% order.orderedItems.forEach(item => { %>
                <div class="p-6">
                  <div class="flex items-center justify-between">
                    <!-- Product Info -->
                    <div class="flex space-x-4">
                      <img src="<%= item.product.productImage[0] %>" 
                           alt="<%= item.product.productName %>" 
                           class="w-24 h-24 object-cover rounded-lg shadow-sm">
                      
                      <div class="flex flex-col justify-center">
                        <h3 class="font-medium text-gray-900 mb-1"><%= item.product.productName %></h3>
                        <div class="flex items-center space-x-4 text-sm text-gray-500">
                          <span>Qty: <%= item.quantity %></span>
                          <span>Size: <%= item.size %></span>
                          <span class="font-medium text-gray-900">Item Price: ₹<%= item.price %></span>
                        </div>
                        
                        <!-- Status Badge -->
                        <div class="mt-2">
                          <% let statusColor = ""; let textColor = ""; %>
                          <% if (item.status === "Shipped" || item.status === "out for delivery") { %>
                            <% statusColor = "bg-blue-100"; textColor = "text-blue-800" %>
                          <% } else if (item.status === "Delivered") { %>
                            <% statusColor = "bg-green-100"; textColor = "text-green-800" %>
                          <% } else if (item.status === "Pending") { %>
                            <% statusColor = "bg-yellow-100"; textColor = "text-yellow-800" %>
                          <% } else if (item.status === "Cancelled" || item.status === "Returned") { %>
                            <% statusColor = "bg-red-100"; textColor = "text-red-800" %>
                          <% } %>
                          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium <%= statusColor %> <%= textColor %>">
                            <%= item.status %>
                          </span>
                        </div>
                      </div>
                    </div>

                    <!-- Action Buttons - Keeping original functionality -->
                    <div class="flex items-center space-x-3">
                      <% if (order.paymentStatus !== 'Failed') { %>
                        <% if (["Pending", "Shipped", "out for delivery"].includes(item.status)) { %>
                          <button onclick="toggleTracking('<%= order.orderId %>', '<%= item.product._id %>')"
                                  class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-gray-700 hover:text-blue-600 border border-gray-200 hover:border-blue-500 rounded-md transition-all duration-200">
                            Track
                          </button>
                          <button onclick="confirmCancellation('<%= order.orderId %>', '<%= item.product._id %>','<%= item.quantity %>','<%= item.size %>')"
                                  class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-red-600 hover:text-red-700 border border-gray-200 hover:border-red-500 rounded-md transition-all duration-200">
                            Cancel
                          </button>
                        <% } %>
                      <% } %>
                      <% if (item.status === "Delivered") { %>
                        <button onclick="confirmReturn('<%= order.orderId %>', '<%= item.product._id %>', '<%= item.quantity %>', '<%= item.size %>')"
                                class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-yellow-600 hover:text-yellow-700 border border-gray-200 hover:border-yellow-500 rounded-md transition-all duration-200">
                          Return
                        </button>
                      <% } %>
                    </div>
                  </div>
                </div>

                <!-- Tracking Section - Keeping original ID and structure -->
                <div id="tracking-<%= order.orderId %>-<%= item.product._id %>" 
                     class="hidden w-full overflow-hidden transition-all duration-500 ease-in-out border-t border-blue-50">
                  <div class="p-6 bg-white animate-fadeIn">
                    <!-- Enhanced Header -->
                    <div class="flex items-center justify-between mb-6">
                      <div class="flex items-center space-x-3">
                        <div class="w-8 h-8 bg-blue-500 rounded-lg flex items-center justify-center">
                          <svg class="w-5 h-5 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"/>
                          </svg>
                        </div>
                        <h3 class="text-lg font-semibold text-blue-900">Track Your Order</h3>
                      </div>
                      <span class="text-sm text-blue-600 font-medium">Order ID: <%= order.orderId %></span>
                    </div>

                    <!-- Timeline -->
                    <div class="relative mt-8">
                      <!-- Animated Progress Line -->
                      <div class="absolute top-5 left-0 w-full h-1 bg-gradient-to-r from-blue-50 to-blue-100 rounded-full">
                        <div class="progress-bar h-full bg-gradient-to-r from-blue-500 to-blue-600 rounded-full transition-all duration-700 ease-out" 
                             id="progress-<%= order.orderId %>-<%= item.product._id %>"></div>
                      </div>

                      <!-- Enhanced Status Points -->
                      <div class="relative flex justify-between">
                        <% const statuses = ['Pending', 'Shipped', 'Out for Delivery', 'Delivered'] %>
                        <% statuses.forEach((status, index) => { %>
                          <div class="flex flex-col items-center animate-slideUp" 
                               style="animation-delay: <%= index * 150 %>ms">
                            <!-- Status Point -->
                            <div class="status-point relative">
                              <div class="w-12 h-12 rounded-full bg-white border-2 border-blue-200 
                                          flex items-center justify-center z-10 transition-all duration-300
                                          shadow-sm hover:shadow-md hover:border-blue-500">
                                <svg class="w-6 h-6 text-blue-500 transition-colors duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                  <% if (status === 'Pending') { %>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                                  <% } else if (status === 'Shipped') { %>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4M5 8v10a2 2 0 002 2h10a2 2 0 002-2V8m-9 4h4" />
                                  <% } else if (status === 'Out for Delivery') { %>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l3.414 3.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0m-4 0a2 2 0 114 0m6 0a2 2 0 104 0m-4 0a2 2 0 114 0" />
                                  <% } else { %>
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                                  <% } %>
                                </svg>
                              </div>
                            </div>
                            <!-- Status Text with Animation -->
                            <p class="mt-3 text-sm font-semibold text-blue-900 animate-fadeIn" 
                               style="animation-delay: <%= (index * 150) + 200 %>ms">
                              <%= status %>
                            </p>
                            <!-- Date with Animation -->
                            <p class="text-xs text-blue-600 mt-1 animate-fadeIn" 
                               style="animation-delay: <%= (index * 150) + 300 %>ms"
                               id="date-<%= status.toLowerCase().replace(/ /g, '-') %>-<%= order.orderId %>-<%= item.product._id %>">
                            </p>
                          </div>
                        <% }) %>
                      </div>
                    </div>
                  </div>
                </div>
              <% }) %>
            </div>
          </div>
        <% }) %>
      <% } else { %>
        <!-- Empty state -->
        <div class="text-center py-12">
          <p class="text-gray-500">No orders found</p>
        </div>
      <% } %>
    </div>
  </div>

  <% if (totalPages > 1) { %>
    <div class="flex items-center justify-center mt-8 space-x-2">
      <!-- Previous Button -->
      <a 
        href="?page=<%= currentPage > 1 ? currentPage - 1 : 1 %>" 
        class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= currentPage === 1 ? 'cursor-not-allowed opacity-50' : '' %>">
        &laquo;
      </a>

      <!-- Page Numbers -->
      <% for (let i = 1; i <= totalPages; i++) { %>
        <a 
          href="?page=<%= i %>" 
          class="px-4 py-2 rounded <%= currentPage === i ? 'bg-yellow-500 text-white hover:bg-yellow-600' : 'bg-gray-200 text-gray-700 hover:bg-gray-300' %>">
          <%= i %>
        </a>
      <% } %>

      <!-- Next Button -->
      <a 
        href="?page=<%= currentPage < totalPages ? currentPage + 1 : totalPages %>" 
        class="px-4 py-2 text-gray-700 bg-gray-200 rounded hover:bg-gray-300 <%= currentPage === totalPages ? 'cursor-not-allowed opacity-50' : '' %>">
        &raquo;
      </a>
    </div>
  <% } %>

<!-- Order Details Modal -->



 

    <!-- cancel modal  -->
  <div id="cancelModal" class="hidden fixed inset-0 flex justify-center items-center bg-gray-900 bg-opacity-50 z-50">
    <div class="bg-white rounded-2xl shadow-xl w-[480px] max-w-lg transform transition-all">
      <!-- Modal Header -->
      <div class="px-6 py-4 border-b border-gray-100">
        <h3 class="text-xl font-semibold text-gray-800">Cancel Order</h3>
        <p class="text-sm text-gray-500 mt-1">Please select a reason for cancellation</p>
      </div>

      <!-- Modal Body -->
      <div class="p-6">
        <form id="cancellationForm" class="space-y-4">
          <!-- Pre-built Reasons -->
          <div class="space-y-3">
            <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="radio" name="cancelReason" value="Changed my mind" class="h-4 w-4 text-blue-600">
              <span class="ml-3 text-gray-700">Changed my mind</span>
            </label>

            <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="radio" name="cancelReason" value="Found better price elsewhere" class="h-4 w-4 text-blue-600">
              <span class="ml-3 text-gray-700">Found better price elsewhere</span>
            </label>

            <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="radio" name="cancelReason" value="Ordered by mistake" class="h-4 w-4 text-blue-600">
              <span class="ml-3 text-gray-700">Ordered by mistake</span>
            </label>

            <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="radio" name="cancelReason" value="Delivery time too long" class="h-4 w-4 text-blue-600">
              <span class="ml-3 text-gray-700">Delivery time too long</span>
            </label>

            <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
              <input type="radio" name="cancelReason" value="other" class="h-4 w-4 text-blue-600">
              <span class="ml-3 text-gray-700">Other reason</span>
            </label>
          </div>

          <!-- Other Reason Textarea (initially hidden) -->
          <div id="otherReasonContainer" class="hidden">
            <textarea
              id="otherReasonText"
              name="otherReasonText"
              rows="3"
              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              placeholder="Please specify your reason..."
            ></textarea>
          </div>

          <!-- Order Summary -->
          <div class="mt-6 bg-gray-50 rounded-lg p-4">
            <h4 class="text-sm font-medium text-gray-700 mb-2">Order Summary</h4>
            <div class="flex justify-between text-sm">
              <span class="text-gray-600">Order ID:</span>
              <span id="summaryOrderId" class="font-medium text-gray-800"></span>
            </div>
            <div class="flex justify-between text-sm mt-1">
              <span class="text-gray-600">Product:</span>
              <span id="summaryProduct" class="font-medium text-gray-800"></span>
            </div>
          </div>
        </form>
      </div>

      <!-- Modal Footer -->
      <div class="px-6 py-4 bg-gray-50 rounded-b-2xl border-t border-gray-100">
        <div class="flex justify-end space-x-3">
          <button 
            onclick="closeCancelModal()" 
            class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-800 transition-colors">
            Cancel
          </button>
          <button 
            id="confirmCancelButton"
            class="px-4 py-2 text-sm font-medium text-white bg-red-600 rounded-lg hover:bg-red-700 
                   transition-colors focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2">
            Confirm Cancellation
          </button>
        </div>
      </div>
    </div>
  </div>
  



  <!-- Order Details Modal -->
<div id="orderDetailsModal" class="hidden fixed inset-y-0 right-0 w-1/3 bg-white shadow-2xl transform transition-transform duration-300 ease-in-out z-50">
    <div class="h-full flex flex-col">
        <!-- Modal Header -->
        <div class="px-6 py-4 border-b border-gray-100">
            <div class="flex justify-between items-center">
                <div>
                    <h3 id="modalOrderId" class="text-xl font-semibold text-gray-800"></h3>
                    <p id="modalOrderDate" class="text-sm text-gray-500 mt-1"></p>
                </div>
                <button onclick="closeModal()" class="text-gray-400 hover:text-gray-500">
                    <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
        </div>

        <!-- Modal Body - with scrolling -->
        <div class="flex-1 overflow-y-auto">
            <!-- Payment Failed Warning -->
            <div id="paymentFailedWarning" class="hidden px-6 py-3 bg-red-50">
                <div class="flex items-center text-red-800">
                    <svg class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                    </svg>
                    <p class="text-sm font-medium">Payment Failed - Please complete the payment to process this order</p>
                </div>
            </div>

            <div class="px-6 py-4 space-y-6">
                <!-- Order Items Section -->
                <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-3">Products</h4>
                    <div id="modalItems" class="space-y-4">
                        <!-- Items will be populated here -->
                    </div>
                </div>

                <!-- Contact Information Section -->
                <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-3">Contact Information</h4>
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="space-y-4">
                            <!-- Phone Number -->
                            <div class="flex items-center text-sm">
                                <span class="text-gray-600 w-24">Phone:</span>
                                <span id="modalPhone" class="text-gray-900 font-medium"></span>
                            </div>
                            
                            <!-- Delivery Address -->
                            <div class="border-t border-gray-200 pt-4">
                                <p class="text-gray-600 text-sm mb-2">Delivery Address:</p>
                                <p id="modalAddress" class="text-sm text-gray-900"></p>
                                <p id="modalAddressType" class="text-xs text-gray-500 mt-1"></p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Payment Information Section -->
                <div>
                    <h4 class="text-sm font-medium text-gray-700 mb-3">Payment Information</h4>
                    <div class="bg-gray-50 rounded-lg p-4">
                        <div class="space-y-3 text-sm">
                            <div class="flex justify-between">
                                <span class="text-gray-600">Payment Method</span>
                                <span id="modalPaymentMethod" class="text-gray-900 font-medium"></span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Coupon Applied</span>
                                <span id="modalCoupon" class="text-gray-900"></span>
                            </div>
                            <div class="flex justify-between">
                                <span class="text-gray-600">Discount</span>
                                <span class="text-gray-900"><span id="modalDiscount"></span></span>
                            </div>
                            <div class="flex justify-between pt-3 border-t border-gray-200">
                                <span class="text-gray-900 font-medium">Total Amount</span>
                                <span class="text-gray-900 font-bold">₹<span id="modalAmount"></span></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal Footer -->
        <div class="px-6 py-4 border-t border-gray-100">
          <form id="invoiceForm" action="/download-invoice" method="POST" class="w-full">
              <input type="hidden" name="orderId" id="modalInvoiceOrderId">
              <button 
                  type="submit"
                  id="downloadInvoiceBtn"
                  class="w-full inline-flex items-center justify-center px-4 py-2.5 border border-transparent text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                  <svg class="w-4 h-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                  </svg>
                  Download Invoice
              </button>
          </form>
      </div>
    </div>
</div>

<!-- Overlay -->
<div id="modalOverlay" class="hidden fixed inset-0 bg-black bg-opacity-50 z-40"></div>

  <script>

  
    function showOrderDetails(orderData) {
        try {
            // Decode the URL-encoded JSON string
            const decodedData = decodeURIComponent(orderData);
            
            // Parse the JSON data
            const order = JSON.parse(decodedData);


            // Populate modal content with order details
            document.getElementById('modalOrderId').textContent = order.orderId;
            document.getElementById('modalOrderDate').textContent = new Date(order.orderDate).toLocaleString();
            document.getElementById('modalPhone').textContent = order.phoneNumber;
            document.getElementById('modalAmount').textContent = order.finalAmount;
            document.getElementById('modalPaymentMethod').textContent = order.paymentMethod;

            // Populate address details
            if (order.address) {
                document.getElementById('modalAddress').textContent = `${order.address.landMark}, ${order.address.city}, ${order.address.state}, ${order.address.pincode}`;
                document.getElementById('modalAddressType').textContent = order.address.addressType;
            }

            // Populate ordered items
            const itemsContainer = document.getElementById('modalItems');
            itemsContainer.innerHTML = ''; // Clear previous items
            order.orderedItems.forEach(item => {
                const itemElement = document.createElement('div');
                itemElement.className = 'flex items-center space-x-4 mb-4';

                itemElement.innerHTML = `
                    <img src="${item.productImage}" alt="${item.productName}" class="w-16 h-16 object-cover rounded">
                    <div>
                        <h4 class="font-medium">${item.productName}</h4>
                        <p class="text-sm text-gray-500">Quantity: ${item.quantity}</p>
                        <p class="text-sm text-gray-500">Size: ${item.size}</p>
                    </div>
                `;

                itemsContainer.appendChild(itemElement);
            });

            // Set up the invoice form
            const invoiceForm = document.getElementById('invoiceForm');
            document.getElementById('modalInvoiceOrderId').value = order.orderId;

            // Add event listener for invoice download
            invoiceForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                try {
                    const response = await fetch('/download-invoice', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ orderId: order.orderId })
                    });

                    if (response.ok) {
                        // Create a blob from the PDF stream
                        const blob = await response.blob();
                        // Create a link to download the PDF
                        const url = window.URL.createObjectURL(blob);
                        const a = document.createElement('a');
                        a.href = url;
                        a.download = `invoice-${order.orderId}.pdf`;
                        document.body.appendChild(a);
                        a.click();
                        window.URL.revokeObjectURL(url);
                        document.body.removeChild(a);

                        // Show toast notification in top-right
                        Swal.fire({
                            toast: true,
                            position: 'top-end',
                            icon: 'success',
                            title: 'Invoice downloaded',
                            showConfirmButton: false,
                            timer: 2000,
                            timerProgressBar: true,
                            customClass: {
                                popup: 'colored-toast',
                                title: 'text-sm font-medium'
                            }
                        });
                    } else {
                        throw new Error('Failed to download invoice');
                    }
                } catch (error) {
                    console.error('Error downloading invoice:', error);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: 'Failed to download invoice. Please try again.'
                    });
                }
            });

            // Show/hide payment failed warning
            const paymentFailedWarning = document.getElementById('paymentFailedWarning');
            if (order.paymentStatus === 'Failed') {
                paymentFailedWarning.classList.remove('hidden');
            } else {
                paymentFailedWarning.classList.add('hidden');
            }

            // Show the modal
            const modal = document.getElementById('orderDetailsModal');
            const overlay = document.getElementById('modalOverlay');
            modal.classList.remove('hidden');
            overlay.classList.remove('hidden');
            document.body.classList.add('overflow-hidden');
        } catch (error) {
            console.error('Error in showOrderDetails:', error);
        
            
            // Show user-friendly error message
            Swal.fire({
                icon: 'error',
                title: 'Oops...',
                text: 'Something went wrong while loading order details. Please try again.',
                confirmButtonColor: '#3B82F6'
            });
        }
    }

    function closeModal() {
        const modal = document.getElementById('orderDetailsModal');
        const overlay = document.getElementById('modalOverlay');
        modal.classList.add('hidden');
        overlay.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
    }


    
// Function to confirm the cancellation and update the UI
function confirmCancellation(orderId, productId, quantity, size) {
    // First show confirmation dialog
    Swal.fire({
        title: 'Cancel Order?',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#EF4444', // Red color
        cancelButtonColor: '#6B7280', // Gray color
        confirmButtonText: 'Yes, cancel it',
        cancelButtonText: 'No, keep it',
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            // If user confirms, show the reason selection modal
            showCancelReasonModal(orderId, productId, quantity, size);
        }
    });
}

function showCancelReasonModal(orderId, productId, quantity, size) {
    // Show the modal
    const cancelModal = document.getElementById('cancelModal');
    cancelModal.classList.remove('hidden');

    // Update the order summary
    document.getElementById('summaryOrderId').textContent = orderId;
    document.getElementById('summaryProduct').textContent = `Qty: ${quantity}, Size: ${size}`;

    // Set up the confirm button
    const confirmCancelButton = document.getElementById('confirmCancelButton');
    confirmCancelButton.onclick = function() {
        const form = document.getElementById('cancellationForm');
        const selectedReason = form.querySelector('input[name="cancelReason"]:checked');
        
        if (!selectedReason) {
            Swal.fire({
                icon: 'warning',
                title: 'Please select a reason',
                text: 'You must select a reason for cancellation',
                confirmButtonColor: '#3B82F6'
            });
            return;
        }

        let cancelReason = selectedReason.value;
        if (cancelReason === 'other') {
            const otherReasonText = document.getElementById('otherReasonText').value.trim();
            if (!otherReasonText) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please specify your reason',
                    text: 'Please provide details for your cancellation reason',
                    confirmButtonColor: '#3B82F6'
                });
                return;
            }
            cancelReason = otherReasonText;
        }

        // Prepare the request data
        const requestData = {
            orderId,
            productId,
            quantity,
            size,
            cancelReason
        };

        // Send cancellation request
        fetch('/cancel-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Cancelled',
                    text: 'Your order has been successfully cancelled',
                    confirmButtonColor: '#3B82F6'
                }).then(() => {
                    // Reload the page or update UI
                    window.location.reload();
                });
            } else {
                throw new Error(data.message || 'Failed to cancel order');
            }
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Something went wrong',
                confirmButtonColor: '#3B82F6'
            });
        });

        closeCancelModal();
    };
}

// Add event listener for the "Other" reason radio button
document.addEventListener('DOMContentLoaded', function() {
    const radioButtons = document.querySelectorAll('input[name="cancelReason"]');
    const otherReasonContainer = document.getElementById('otherReasonContainer');

    radioButtons.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.value === 'other') {
                otherReasonContainer.classList.remove('hidden');
            } else {
                otherReasonContainer.classList.add('hidden');
            }
        });
    });
});

function closeCancelModal() {
    const cancelModal = document.getElementById('cancelModal');
    const form = document.getElementById('cancellationForm');
    form.reset();
    document.getElementById('otherReasonContainer').classList.add('hidden');
    cancelModal.classList.add('hidden');
}

function showNotification(message, bgColor) {
    const notification = document.createElement('div');
    notification.className = `fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-md shadow-lg z-50 transition-all duration-500 transform translate-x-full`;
    notification.textContent = message;
    document.body.appendChild(notification);

    // Animate in
    setTimeout(() => {
        notification.classList.remove('translate-x-full');
    }, 100);

    // Remove after 3 seconds
    setTimeout(() => {
        notification.classList.add('translate-x-full');
        setTimeout(() => {
            notification.remove();
        }, 500);
    }, 3000);
}

// Update the track order function with better error handling
function trackOrder(orderId, productId) {
    
    if (!orderId || !productId) {
        console.error('Missing parameters:', { orderId, productId });
        showNotification('Missing order or product information', 'bg-red-500');
        return;
    }

    // Encode the URL parameters
    const encodedOrderId = encodeURIComponent(orderId);
    const encodedProductId = encodeURIComponent(productId);
    const url = `/track-order/${encodedOrderId}/${encodedProductId}`;
    

    fetch(url, {
        headers: {
            'Accept': 'application/json'
        }
    })
    .then(response => {
        if (!response.ok) {
            console.error('Response not OK:', response.status, response.statusText);
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    })
    .then(data => {
        
        if (!data || !data.productName) {
            throw new Error('Invalid data received from server');
        }

        const modal = document.getElementById('trackingModal');
        const productNameEl = document.getElementById('trackingProductName');
        
        // Set product name
        productNameEl.textContent = data.productName;

        // Calculate dates
        const orderDate = new Date(data.orderDate);
        const shippedDate = new Date(orderDate);
        shippedDate.setDate(orderDate.getDate() + 2);
        
        const outForDeliveryDate = new Date(shippedDate);
        outForDeliveryDate.setDate(shippedDate.getDate() + 2);
        
        const deliveredDate = new Date(outForDeliveryDate);
        deliveredDate.setDate(outForDeliveryDate.getDate() + 1);

        // Format dates
        const formatDate = (date) => {
            return date.toLocaleDateString('en-US', {
                day: 'numeric',
                month: 'short',
                year: 'numeric'
            });
        };

        // Set dates in modal
        document.getElementById('pendingDate').textContent = formatDate(orderDate);
        document.getElementById('shippedDate').textContent = formatDate(shippedDate);
        document.getElementById('outForDeliveryDate').textContent = formatDate(outForDeliveryDate);
        document.getElementById('deliveredDate').textContent = formatDate(deliveredDate);
        document.getElementById('expectedDeliveryDate').textContent = formatDate(deliveredDate);

        // Update timeline points based on current status
        const timelinePoints = modal.querySelectorAll('.z-10');
        const statuses = ['Pending', 'Shipped', 'out for delivery', 'Delivered'];
        const currentStatusIndex = statuses.indexOf(data.status);

        timelinePoints.forEach((point, index) => {
            if (index <= currentStatusIndex) {
                point.classList.remove('bg-gray-300');
                point.classList.add('bg-blue-500');
            } else {
                point.classList.remove('bg-blue-500');
                point.classList.add('bg-gray-300');
            }
        });

        // Show modal
        modal.classList.remove('hidden');
    })
    .catch(error => {
        console.error('Tracking error:', error);
        showNotification(`Error: ${error.message}`, 'bg-red-500');
    });
}

function closeTrackingModal() {
    document.getElementById('trackingModal').classList.add('hidden');
}

function toggleTracking(orderId, productId) {
    const trackingDiv = document.getElementById(`tracking-${orderId}-${productId}`);
    const isHidden = trackingDiv.classList.contains('hidden');
    
    if (isHidden) {
        // Show tracking
        trackingDiv.classList.remove('hidden');
        trackingDiv.style.maxHeight = '0';
        setTimeout(() => {
            trackingDiv.style.maxHeight = trackingDiv.scrollHeight + 'px';
        }, 10);
        
        // Fetch tracking data
        fetch(`/track-order/${encodeURIComponent(orderId)}/${encodeURIComponent(productId)}`)
            .then(response => response.json())
            .then(data => {
                updateTrackingStatus(orderId, productId, data);
            })
            .catch(error => {
                console.error('Error:', error);
            });
    } else {
        // Hide tracking with animation
        trackingDiv.style.maxHeight = '0';
        setTimeout(() => {
            trackingDiv.classList.add('hidden');
        }, 500);
    }
}

function updateTrackingStatus(orderId, productId, data) {
    const statuses = ['pending', 'shipped', 'out for delivery', 'delivered'];
    const currentStatus = data.status.toLowerCase();
    const currentIndex = statuses.indexOf(currentStatus);
    
    
    // Calculate all dates based on order date
    const orderDate = new Date(data.orderDate);
    
    // Calculate expected dates for each status
    const expectedDates = {
        'pending': orderDate,
        'shipped': new Date(orderDate.getTime() + (2 * 24 * 60 * 60 * 1000)),
        'out for delivery': new Date(orderDate.getTime() + (4 * 24 * 60 * 60 * 1000)),
        'delivered': new Date(orderDate.getTime() + (6 * 24 * 60 * 60 * 1000))
    };

    // Format dates
    const formatDate = (date) => {
        return date.toLocaleDateString('en-US', {
            day: 'numeric',
            month: 'short',
            year: 'numeric'
        });
    };

    // Update progress bar
    const progressBar = document.getElementById(`progress-${orderId}-${productId}`);
    progressBar.style.width = `${((currentIndex + 1) / statuses.length) * 100}%`;
    
    // Update status points and dates
    const trackingDiv = document.getElementById(`tracking-${orderId}-${productId}`);
    const statusPoints = trackingDiv.querySelectorAll('.status-point');
    
    statusPoints.forEach((point, index) => {
        const status = statuses[index];
        const statusElement = point.querySelector('svg').parentElement;
        const dateElementId = `date-${status.replace(/ /g, '-')}-${orderId}-${productId}`;
        const dateElement = document.getElementById(dateElementId);
        
        if (dateElement) {
            // Always show the expected date for each status point
            const expectedDate = expectedDates[status];
            dateElement.textContent = formatDate(expectedDate);
            
            if (index <= currentIndex) {
                // Active/completed status
                statusElement.classList.remove('border-blue-200');
                statusElement.classList.add('border-blue-500');
                statusElement.querySelector('svg').classList.remove('text-blue-400');
                statusElement.querySelector('svg').classList.add('text-blue-500');
                dateElement.classList.add('text-blue-600');
                dateElement.classList.remove('text-gray-400');
            } else {
                // Future status
                statusElement.classList.remove('border-blue-500');
                statusElement.classList.add('border-blue-200');
                statusElement.querySelector('svg').classList.remove('text-blue-500');
                statusElement.querySelector('svg').classList.add('text-blue-400');
                dateElement.classList.remove('text-blue-600');
                dateElement.classList.add('text-gray-400');
            }
        }

        // Update pulse animation
        const pulseElement = point.querySelector('.animate-ping-slow');
        if (pulseElement) {
            if (index === currentIndex) {
                pulseElement.classList.remove('scale-0');
            } else {
                pulseElement.classList.add('scale-0');
            }
        }
    });

}

function confirmReturn(orderId, productId, quantity, size) {
    // First show confirmation dialog
    Swal.fire({
        title: 'Return Order?',
        text: 'Are you sure you want to return this order?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#3B82F6', // Blue color
        cancelButtonColor: '#6B7280', // Gray color
        confirmButtonText: 'Yes, return it',
        cancelButtonText: 'No, keep it',
        reverseButtons: true
    }).then((result) => {
        if (result.isConfirmed) {
            // If user confirms, show the reason selection modal
            showReturnReasonModal(orderId, productId, quantity, size);
        }
    });
}

function showReturnReasonModal(orderId, productId, quantity, size) {
    // Show the modal
    const returnModal = document.getElementById('returnModal');
    returnModal.classList.remove('hidden');

    // Update the order summary
    document.getElementById('returnSummaryOrderId').textContent = orderId;
    document.getElementById('returnSummaryProduct').textContent = `Qty: ${quantity}, Size: ${size}`;

    // Set up the confirm button
    const confirmReturnButton = document.getElementById('confirmReturnButton');
    confirmReturnButton.onclick = function() {
        const form = document.getElementById('returnForm');
        const selectedReason = form.querySelector('input[name="returnReason"]:checked');
        
        if (!selectedReason) {
            Swal.fire({
                icon: 'warning',
                title: 'Please select a reason',
                text: 'You must select a valid reason for return',
                confirmButtonColor: '#3B82F6'
            });
            return;
        }

        let returnReason = selectedReason.value;
        if (returnReason === 'other') {
            const otherReasonText = document.getElementById('returnOtherReasonText').value.trim();
            if (!otherReasonText) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Please specify your reason',
                    text: 'Please provide details for your return reason',
                    confirmButtonColor: '#3B82F6'
                });
                return;
            }
            returnReason = otherReasonText;
        }

        // Prepare the request data
        const requestData = {
            orderId,
            productId,
            quantity,
            size,
            returnReason
        };

        // Send return request
        fetch('/return-order', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            },
            body: JSON.stringify(requestData)
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Return Requested',
                    text: 'Your return request has been successfully submitted',
                    confirmButtonColor: '#3B82F6'
                }).then(() => {
                    // Reload the page or update UI
                    window.location.reload();
                });
            } else {
                throw new Error(data.message || 'Failed to submit return request');
            }
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: error.message || 'Something went wrong',
                confirmButtonColor: '#3B82F6'
            });
        });

        closeReturnModal();
    };
}

// Add event listener for the "Other" reason radio button in return form
document.addEventListener('DOMContentLoaded', function() {
    const returnRadioButtons = document.querySelectorAll('input[name="returnReason"]');
    const returnOtherReasonContainer = document.getElementById('returnOtherReasonContainer');

    returnRadioButtons.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.value === 'other') {
                returnOtherReasonContainer.classList.remove('hidden');
            } else {
                returnOtherReasonContainer.classList.add('hidden');
            }
        });
    });
});

function closeReturnModal() {
    const returnModal = document.getElementById('returnModal');
    const form = document.getElementById('returnForm');
    form.reset();
    document.getElementById('returnOtherReasonContainer').classList.add('hidden');
    returnModal.classList.add('hidden');
}

document.addEventListener('DOMContentLoaded', function() {
    const orderPlaced = localStorage.getItem('orderPlaced');
    const paymentStatus = localStorage.getItem('paymentStatus');

    if (orderPlaced === 'true') {
        // Show appropriate toast based on payment status
        Toastify({
            text: paymentStatus === 'Failed' ? 
                  "Order placed but payment failed. You can try payment again later." : 
                  "Order placed successfully!",
            duration: 3000,
            gravity: "top",
            position: "right",
            style: {
                background: paymentStatus === 'Failed' ? "#dc3545" : "#000000",
                color: "#ffffff",
                borderRadius: "8px",
                padding: "12px 24px",
                marginTop: "60px"
            }
        }).showToast();
        
        // Clear the flags
        localStorage.removeItem('orderPlaced');
        localStorage.removeItem('paymentStatus');
    }
});

function retryPayment(orderId, amount) {
    fetch('/retry-razorpay-order', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ orderId, amount })
    })
    .then(res => res.json())
    .then(data => {
        if (data.success) {
            const options = {
                key: '<%= process.env.RAZORPAY_KEY_ID %>',
                amount: data.amount,
                currency: "INR",
                name: "Your Store Name",
                description: "Retry Payment",
                order_id: data.orderId,
                handler: async function (response) {
                    try {
                        const verifyResponse = await fetch('/update-payment-status', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                orderId: orderId
                            })
                        });

                        const result = await verifyResponse.json();
                        if (result.success) {
                            Swal.fire({
                                title: 'Payment Successful',
                                text: 'Your payment has been completed successfully',
                                icon: 'success',
                                confirmButtonColor: '#3B82F6'
                            }).then(() => {
                                window.location.reload();
                            });
                        }
                    } catch (error) {
                        console.error('Payment verification error:', error);
                        showToast('Payment verification failed', 'error');
                    }
                },
                modal: {
                    ondismiss: function() {
                        showToast('Payment cancelled', 'warning');
                    }
                }
            };

            const razorpayInstance = new Razorpay(options);
            razorpayInstance.on('payment.failed', function(response) {
                showToast('Payment failed', 'error');
            });

            razorpayInstance.open();
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showToast('Failed to initialize payment', 'error');
    });
}

    </script>


<!-- Add this new Return Modal -->
<div id="returnModal" class="hidden fixed inset-0 flex justify-center items-center bg-gray-900 bg-opacity-50 z-50">
  <div class="bg-white rounded-2xl shadow-xl w-[420px] max-w-lg transform transition-all">
    <!-- Modal Header -->
    <div class="px-6 py-2 border-b border-gray-100">
      <h3 class="text-xl font-semibold text-gray-800">Return Order</h3>
      <p class="text-sm text-gray-500 mt-1">Please select a valid reason for return</p>
    </div>

    <!-- Modal Body -->
    <div class="p-2">
      <div class=" p-2 bg-blue-50 rounded-lg">
        <p class="text-sm text-blue-800">
          <span class="font-medium">Note:</span> Returns are only accepted for valid reasons and within 7 days of delivery.
          The product must be unused and in its original packaging.
        </p>
      </div>

      <form id="returnForm" class="space-y-4">
        <!-- Pre-built Return Reasons -->
        <div class="space-y-3">
          <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input type="radio" name="returnReason" value="Wrong size received" class="h-4 w-4 text-blue-600">
            <span class="ml-3 text-gray-700">Wrong size received</span>
          </label>

          <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input type="radio" name="returnReason" value="Defective product" class="h-4 w-4 text-blue-600">
            <span class="ml-3 text-gray-700">Defective product</span>
          </label>

          <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input type="radio" name="returnReason" value="Item doesn't match description" class="h-4 w-4 text-blue-600">
            <span class="ml-3 text-gray-700">Item doesn't match description</span>
          </label>

          <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input type="radio" name="returnReason" value="Quality not as expected" class="h-4 w-4 text-blue-600">
            <span class="ml-3 text-gray-700">Quality not as expected</span>
          </label>

          <label class="flex items-center p-3 border rounded-lg cursor-pointer hover:bg-gray-50 transition-colors">
            <input type="radio" name="returnReason" value="other" class="h-4 w-4 text-blue-600">
            <span class="ml-3 text-gray-700">Other reason</span>
          </label>
        </div>

        <!-- Other Reason Textarea (initially hidden) -->
        <div id="returnOtherReasonContainer" class="hidden">
          <textarea
            id="returnOtherReasonText"
            name="returnOtherReasonText"
            rows="3"
            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder="Please specify your reason for return..."
          ></textarea>
        </div>

        <!-- Order Summary -->
        <div class="mt-1 bg-gray-50 rounded-lg p-4">
          <h4 class="text-sm font-medium text-gray-700 ">Order Summary</h4>
          <div class="flex justify-between text-sm">
            <span class="text-gray-600">Order ID:</span>
            <span id="returnSummaryOrderId" class="font-medium text-gray-800"></span>
          </div>
          <div class="flex justify-between text-sm mt-1">
            <span class="text-gray-600">Product:</span>
            <span id="returnSummaryProduct" class="font-medium text-gray-800"></span>
          </div>
        </div>
      </form>
    </div>

    <!-- Modal Footer -->
    <div class="px-6 py-4 bg-gray-50 rounded-b-2xl border-t border-gray-100">
      <div class="flex justify-end space-x-3">
        <button 
          onclick="closeReturnModal()" 
          class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-800 transition-colors">
          Cancel
        </button>
        <button 
          id="confirmReturnButton"
          class="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-lg hover:bg-blue-700 
                 transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
          Submit Return Request
        </button>
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes slideUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  .animate-slideUp {
    animation: slideUp 0.5s ease-out forwards;
  }

  .animate-fadeIn {
    animation: fadeIn 0.5s ease-out forwards;
  }

  /* Progress bar animation */
  .progress-bar {
    transform-origin: left;
    animation: progressGrow 0.7s ease-out forwards;
  }

  @keyframes progressGrow {
    from {
      transform: scaleX(0);
    }
    to {
      transform: scaleX(1);
    }
  }

  @keyframes ping-slow {
    0% {
      transform: scale(0);
      opacity: 0.5;
    }
    50% {
      transform: scale(1.5);
      opacity: 0.25;
    }
    100% {
      transform: scale(2);
      opacity: 0;
    }
  }

  .animate-ping-slow {
    animation: ping-slow 2s cubic-bezier(0, 0, 0.2, 1) infinite;
  }

  .colored-toast {
    background: #1F2937 !important;
    color: white !important;
    padding: 0.5rem 1.5rem !important;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1) !important;
  }
  .colored-toast .swal2-title {
    color: white !important;
    font-size: 0.875rem !important;
  }
  .colored-toast .swal2-icon {
    font-size: 0.75rem !important;
    margin: 0.25rem !important;
  }
</style>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

</body>
</html>