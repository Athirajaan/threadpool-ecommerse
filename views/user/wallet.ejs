<%- include('../partials/user/userheader') %> <%-
include('../partials/user/userProfile') %>

<div class="ml-64 flex-1">
  <!-- Breadcrumbs -->
  <nav class="px-8 py-5">
    <ol class="flex items-center">
      <li class="flex items-center">
        <a
          href="/"
          class="text-xs uppercase tracking-wider text-gray-500 hover:text-gray-700"
          >Home</a
        >
      </li>
      <li class="flex items-center">
        <span class="mx-3 inline-block">
          <svg
            class="w-4 h-4 text-gray-400"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1"
              d="M9 5l7 7-7 7"
            />
          </svg>
        </span>
        <span class="text-xs uppercase tracking-wider text-gray-900 font-medium"
          >Wallet</span
        >
      </li>
    </ol>
  </nav>

  <div class="px-8 py-6">
    <!-- Wallet Balance Card -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
      <div class="flex items-center justify-between">
        <div>
          <p class="text-sm font-medium text-gray-500">Available Balance</p>
          <h2 class="text-3xl font-bold text-gray-900 mt-1">₹<%= wallet?.balance || '0' %></h2>
        </div>
        <button
          onclick="showAddMoneyModal()"
          class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-150 text-sm font-medium"
        >
          <svg class="w-5 h-5 mr-2" width="20" height="20" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/>
          </svg>
          Add Money
        </button>
      </div>
    </div>

    <!-- Transaction History -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-100">
      <div class="px-6 py-4 border-b border-gray-100">
        <h3 class="text-lg font-semibold text-gray-900">Transaction History</h3>
      </div>

      <% if (wallet?.transactions && wallet.transactions.length > 0) { %>
        <div class="divide-y divide-gray-100">
          <% wallet.transactions.reverse().forEach(transaction => { %>
            <div class="px-6 py-4 flex items-center justify-between hover:bg-gray-50 transition-colors">
              <div class="flex items-center space-x-4">
                <div class="<%= transaction.type === 'credit' ? 'bg-green-100' : 'bg-red-100' %> p-2 rounded-full">
                  <svg class="w-6 h-6 <%= transaction.type === 'credit' ? 'text-green-600' : 'text-red-600' %>" 
                       fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="<%= transaction.type === 'credit' ? 'M7 11l5-5m0 0l5 5m-5-5v12' : 'M17 13l-5 5m0 0l-5-5m5 5V6' %>"/>
                  </svg>
                </div>
                <div>
                  <p class="text-sm font-medium text-gray-900">
                    <%= transaction.description.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ') %>
                  </p>
                  <p class="text-xs text-gray-500">
                    <%= new Date(transaction.date).toLocaleDateString('en-IN', { 
                      day: '2-digit', 
                      month: 'short', 
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    }) %>
                  </p>
                </div>
              </div>
              <span class="text-sm font-medium <%= transaction.type === 'credit' ? 'text-green-600' : 'text-red-600' %>">
                <%= transaction.type === 'credit' ? '+' : '-' %>₹<%= transaction.amount %>
              </span>
            </div>
          <% }); %>
        </div>
      <% } else { %>
        <!-- Empty State -->
        <div class="py-12 px-6 text-center">
          <svg class="w-16 h-16 mx-auto text-gray-300 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" 
                  d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z"/>
          </svg>
          <p class="text-gray-500 mb-2">No transactions yet</p>
          <p class="text-sm text-gray-400">Add money to your wallet to get started</p>
        </div>
      <% } %>
    </div>
  </div>
</div>

<!-- Add Money Modal -->
<div
  id="addMoneyModal"
  class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center z-50"
>
  <div
    class="bg-white rounded-xl shadow-xl max-w-md w-full mx-4"
  >
    <div class="px-6 py-4 border-b border-gray-100">
      <h3 class="text-xl font-semibold text-gray-900">Add Money to Wallet</h3>
    </div>

    <div class="p-6">
      <form id="addMoneyForm" onsubmit="handleAddMoney(event)">
        <div class="mb-6">
          <label class="block text-sm font-medium text-gray-700 mb-2">Enter Amount</label>
          <div class="relative">
            <span class="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">₹</span>
            <input type="number" 
                   id="walletAmount"
                   name="amount"
                   class="w-full pl-8 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                   placeholder="0.00"
                   min="5"
                   oninput="validateAmount(this)">
          </div>
          <!-- Validation Message -->
          <div id="amountError" class="hidden mt-2 text-sm text-red-600">
            <svg class="inline w-4 h-4 mr-1 -mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                    d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
            </svg>
            Amount must be at least ₹5
          </div>
          <p class="text-xs text-gray-500 mt-1">Minimum amount: ₹5</p>
        </div>

        <div class="flex justify-end space-x-3">
          <button type="button"
                  onclick="closeAddMoneyModal()" 
                  class="px-4 py-2 text-sm font-medium text-gray-700 hover:text-gray-800 transition-colors">
            Cancel
          </button>
          <button type="submit"
                  id="submitButton"
                  class="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-lg hover:bg-blue-700 
                         transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
            Proceed to Pay
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
function showAddMoneyModal() {
    document.getElementById('addMoneyModal').classList.remove('hidden');
}

function closeAddMoneyModal() {
    const form = document.getElementById('addMoneyForm');
    const errorDiv = document.getElementById('amountError');
    form.reset();
    errorDiv.classList.add('hidden');
    document.getElementById('addMoneyModal').classList.add('hidden');
}

async function handleAddMoney(event) {
    event.preventDefault();
    
    const amount = document.getElementById('walletAmount').value;
    
    // Validate amount
    if (amount < 5) {
        Swal.fire({
            icon: 'error',
            title: 'Invalid Amount',
            text: 'Amount must be at least ₹5'
        });
        return;
    }

    try {
        // Create Razorpay order
        const response = await fetch('/wallet/add-money', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ amount })
        });

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.message);
        }

        // Configure Razorpay
        const options = {
            key: data.key_id,
            amount: data.order.amount,
            currency: data.order.currency,
            order_id: data.order.id,
            name: 'Add Money to Wallet',
            description: 'Wallet Recharge',
            handler: function(response) {
                verifyPayment(response, data.order);
            },
            modal: {
                ondismiss: function() {
                    console.log('Payment modal closed');
                }
            },
            prefill: {
                name: '<%= user.name %>',
                email: '<%= user.email %>'
            },
            theme: {
                color: '#2563EB'
            }
        };

        const rzp = new Razorpay(options);
        rzp.open();
        closeAddMoneyModal();

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error.message || 'Failed to process payment'
        });
    }
}

async function verifyPayment(payment, order) {
    try {
        const response = await fetch('/wallet/verify-payment', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                payment,
                order
            })
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire({
                icon: 'success',
                title: 'Money Added Successfully',
                text: 'Your wallet has been updated'
            }).then(() => {
                window.location.reload();
            });
        } else {
            throw new Error(data.message);
        }

    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Payment Verification Failed',
            text: error.message || 'Failed to verify payment'
        });
    }
}

function validateAmount(input) {
    const errorDiv = document.getElementById('amountError');
    const submitButton = document.getElementById('submitButton');
    
    if (input.value < 5) {
        errorDiv.classList.remove('hidden');
        submitButton.disabled = true;
        submitButton.classList.add('opacity-50', 'cursor-not-allowed');
    } else {
        errorDiv.classList.add('hidden');
        submitButton.disabled = false;
        submitButton.classList.remove('opacity-50', 'cursor-not-allowed');
    }
}
</script>
</body>
</html>