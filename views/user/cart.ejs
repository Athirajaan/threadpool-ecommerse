<%- include('../partials/user/userheader') %> 
<style>
  .notification-container {
    position: fixed;
    top: 20px; /* Distance from the top */
    left: 50%; /* Center horizontally */
    transform: translateX(-50%); /* Adjust to center */
    z-index: 1000;
    width: auto;
    padding: 10px 20px;
    background-color: #38a169; /* Green for success */
    color: white;
    font-size: 14px;
    border-radius: 5px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    opacity: 0;
    transform: translate(-50%, -10px); /* Start slightly above */
    transition: opacity 0.3s ease, transform 0.3s ease;
  }

  .notification-container.error {
    background-color: #e53e3e; /* Red for error */
  }

  .notification-container.show {
    opacity: 1;
    transform: translate(-50%, 0); /* Slide into place */
  }
</style>


<% if (items.length === 0) { %>
  <section class="flex flex-col items-center justify-center h-screen bg-gray-100">
    <!-- Animated Empty Bag Icon -->
    <div class="relative mb-6">
      <div class="w-24 h-24 border-4 border-gray-300 rounded-full flex items-center justify-center animate-pulse">
        <!-- Bag Icon -->
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke-width="2"
          stroke="gray"
          class="w-16 h-16"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            d="M3 3h18M8 7v1a4 4 0 008 0V7m-1 4h-6v7a2 2 0 002 2h2a2 2 0 002-2v-7z"
          />
        </svg>
      </div>
    </div>
  
    <!-- Text Section -->
    <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-2">
      Your Bag is Empty
    </h1>
    <p class="text-gray-600 mb-6">
      Add some items to fill it up and take the first step towards your fitness goals!
    </p>
  
    <!-- Call-to-Action Button -->
    <a
      href="/"
      class="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg shadow-md hover:bg-blue-700 transition"
    >
      Start Shopping
    </a>
  </section>
  
  
<% } else { %>
<div class="max-w-7xl mx-auto p-6">
  <!-- Main Container -->
  <div class="flex flex-col lg:flex-row gap-6">
    <!-- Left: Products Section -->
    <div class="bg-white w-full lg:w-2/3 p-6 rounded-lg shadow-md flex flex-col">
      <!-- Actions on Top -->
      <div class="flex items-center justify-between mb-6">
       
        <h2 class="text-lg font-semibold text-yellow-500">Your Cart   (<%= items.length %> Items)         </h2>
        <div class="flex items-center space-x-4">
          <button class="text-sm text-blue-500 font-semibold hover:underline" onclick="showModal('removeAllModal')">Remove All</button>
          <button class="text-sm text-blue-500 font-semibold hover:underline" onclick="showModal('moveAllToWishlistModal')">Move All to Wishlist</button>
        </div>
      </div>
      <!-- Cart Items -->
      <div class="space-y-6">
       
          <% items.forEach(item => { %>
            <div class="flex items-start gap-4 border-b border-gray-300">
              <img src="<%= item.productId.productImage[0] %>" alt="<%= item.productId.productName %>" class="w-24 h-24 rounded-lg">
              <div class="ml-4 flex-1">
                <h3 class="text-sm font-medium"><%= item.productId.productName %></h3>
                <!-- <p class="text-sm text-gray-600">Description: <%= item.productId.description %></p> -->
                <div class="flex items-center space-x-4 mt-2">
                  <button 
        class=" px-2 py-1 text-sm size-btn" 
        data-item-id="<%= item.productId._id %>" >
        Size: <span id="size-display-<%= item.productId._id %>"><%= item.size%></span>
      </button>
      <button 
      class="border border-gray-300 rounded-lg px-2 py-1 text-sm quantity-btn" 
      data-item-id="<%= item.productId._id %>" 
      data-item-size="<%= item.size %>"
      onclick="openQuantityModal('<%= item.productId._id %>', '<%= item.size %>')">
      Qty: <span id="quantity-display-<%= item.productId._id %>-<%= item.size %>">
        <%= item.quantity %>
      </span>
    </button>
    
                </div>
                <% if (item.isOutOfStock) { %>
                  <p class="text-sm text-red-500 font-medium mt-2">Out of Stock</p>
                <% } else { %>
                  <p class="text-sm text-green-500 font-medium mt-2">7 days return available</p>
                <% } %>
              </div>
              <div class="text-right">
                <div class="flex items-center justify-between space-x-2">
                  <p class="text-lg font-semibold text-gray-900" id="total-price-display-<%= item.productId._id %>-<%= item.size %>">₹<%= item.totalPrice %></p>

                  <p id="regular-price-display-<%= item.productId._id %>-<%= item.size %>" class="text-sm font-semibold text-gray-400 line-through">
                    ₹<%= item.productId.regularPrice * item.quantity %>
                  </p>
                  
                </div>
                <p class="text-sm text-green-500 font-medium">
                    <% 
                        const regularPrice = item.productId.regularPrice;
                        const actualPrice = item.totalPrice / item.quantity; // Get per-item price
                        const discountPercentage = Math.round(((regularPrice - actualPrice) / regularPrice) * 100);
                    %>
                    <%= discountPercentage %>% OFF
                </p>
                <!-- Remove Icon -->
                <i class="fa fa-trash text-red-500 hover:text-red-700 cursor-pointer mt-4" 
                onclick="removeItem('<%= item.productId._id %>', '<%= item.size %>')" 
                title="Remove from cart">
             </i>
              </div>
            </div>
          <% }); %>
       
      </div>
    </div>

    <!-- Right: Price Details Section -->
    <div class="bg-white w-full lg:w-1/3 p-6 rounded-lg shadow-md flex flex-col">
      <!-- Apply Coupon Section -->
      <div class="mb-6">
        <h3 class="text-lg font-semibold mb-4">Apply Coupon</h3>
        <div class="flex items-center space-x-4">
          <select id="couponDropdown" class="w-2/3 border border-gray-300 rounded-lg px-4 py-2 text-sm">

          </select>
          <button id="applyCouponBtn" class="w-1/3 bg-blue-500 text-white py-2 rounded-lg font-semibold hover:bg-blue-600">Apply</button>
        </div>
        <div id="couponFeedback" class="mt-4 hidden text-sm rounded-lg p-3 text-white"></div>
      </div>

      <!-- Price Details Section --> 
      <h3 class="text-lg font-semibold mb-4">Price Details (<%= items.length %> Items)</h3>
      <div class="space-y-3">
        <div class="flex justify-between text-sm text-gray-600">
          <p>Total MRP:</p>
          <p id="totalMRP">₹<%= totalMRP %></p>
        </div>
        <div class="flex justify-between text-sm text-gray-600">
          <p>Discount on MRP:</p>
          <p id="discountOnMRP">-₹<%= discountOnMRP %></p>
        </div>
        <div class="flex justify-between text-sm text-gray-600">
          <p>Coupon Discount:</p>
          <p id="couponDiscount">-₹<%= cart.couponDiscount || 0 %></p>
        </div>
       
        <div class="flex justify-between text-sm text-gray-600">
          <p>Shipping Fee:</p>
          <p>Free</p>
        </div>
      </div>
      <div class="flex justify-between mt-6 text-lg font-semibold">
        <p>Total Amount:</p>
        <p id="totalAmount">₹<%= finalAmount %></p>
      </div>
      <!-- Place Order Button Section -->
      <% if (hasUnavailableProducts) { %>
        <button disabled class="mt-6 w-full bg-gray-400 text-white py-3 rounded-lg font-semibold cursor-not-allowed opacity-60">
          REMOVE OUT OF STOCK ITEMS TO PLACE ORDER
        </button>
      <% } else { %>
        <a href="/checkout">
          <button class="mt-6 w-full bg-yellow-500 text-black py-3 rounded-lg font-semibold hover:bg-yellow-600">
            PLACE ORDER
          </button>
        </a>
      <% } %>
      
    </div>
    
 <% } %>
  </div>

 </div>
     
    <!-- Example of Remove All Modal -->
    <div id="removeAllModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center">
      <div class="bg-white p-4 rounded-lg shadow-lg w-96">
        <p class="text-sm text-gray-800 mb-4">Are you sure you want to remove these products?</p>
        <div class="flex justify-end space-x-4">
          <button class="text-red-500 hover:text-red-700" onclick="removeAllItems()">Remove</button>
          <button class="text-blue-500 hover:text-blue-700" onclick="moveAllToWishlist()">Move to Wishlist</button>
        </div>
      </div>
    </div>
    
    
<!-- Move All to Wishlist Modal -->
<div id="moveAllToWishlistModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white p-4 rounded-lg shadow-lg w-96">
    <p class="text-sm text-gray-800 mb-4">Are you sure you want to move these items to the wishlist?</p>
    <div class="flex justify-end space-x-4">
      <button class="text-gray-500 hover:text-gray-700" onclick="closeModal('moveAllToWishlistModal')">Cancel</button>
      <button class="text-blue-500 hover:text-blue-700" onclick="moveAllToWishlist()">Move to Wishlist</button>
    </div>
  </div>
</div>

<!-- Remove Single Item Modal -->
<div id="removeItemModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white p-4 rounded-lg shadow-lg w-96">
    <p id="modalItemDetails" class="text-sm text-gray-800 mb-4"></p>
    <div class="flex justify-end space-x-4">
      <button class="text-red-500 hover:text-red-700" id="confirmRemoveBtn">Remove</button>
      <button class="text-blue-500 hover:text-blue-700" onclick="closeModal()">Cancel</button>
    </div>
  </div>
</div>

<!-- Quantity Modal -->
<div id="quantityModal" class="hidden fixed inset-0 bg-gray-900 bg-opacity-50 flex justify-center items-center">
  <div class="bg-white p-6 rounded-lg shadow-lg">
    <h2 class="text-lg font-semibold mb-4">Select Quantity</h2>
    <div class="grid grid-cols-5 gap-4">
      <button class="py-2 px-4 border rounded-lg hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" onclick="updateQuantity(1)">1</button>
      <button class="py-2 px-4 border rounded-lg hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" onclick="updateQuantity(2)">2</button>
      <button class="py-2 px-4 border rounded-lg hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" onclick="updateQuantity(3)">3</button>
      <button class="py-2 px-4 border rounded-lg hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" onclick="updateQuantity(4)">4</button>
      <button class="py-2 px-4 border rounded-lg hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-white" onclick="updateQuantity(5)">5</button>
    </div>
    <button class="mt-4 bg-pink-500 text-white py-2 px-4 rounded-lg hover:bg-pink-600" onclick="closeQuantityModal()">Done</button>
  </div>
</div>

<script>
// Declare variables at the top of your script
let itemToRemove = null; // Move this to the top
let currentItemId = null;
let currentItemForQuantity = null;

// Function to fetch eligible coupons
async function fetchEligibleCoupons() {
    try {
        const cartTotal = parseFloat(document.getElementById('totalAmount').textContent.replace('₹', ''));
        
        const response = await fetch('/get-eligible-coupons', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ cartTotal })
        });

        if (!response.ok) {
            throw new Error('Failed to fetch coupons');
        }

        const data = await response.json();
        
        if (!data.success) {
            throw new Error(data.message);
        }

        const dropdown = document.getElementById('couponDropdown');
        // Clear existing options except the first one
        dropdown.innerHTML = '<option value="">Select a Coupon</option>';

        // Add eligible coupons to dropdown
        data.coupons.forEach(coupon => {
            const option = document.createElement('option');
            option.value = coupon.name;
            option.textContent = `${coupon.name} - ${
                coupon.couponType === 'percentage' 
                    ? `${coupon.discountPrice}% Off` 
                    : `₹${coupon.discountPrice} Off`
            }`;
            dropdown.appendChild(option);
        });

    } catch (error) {
        console.error('Error:', error);
        showFeedback('Failed to load coupons', 'bg-red-500');
    }
}

// Call this function when page loads
document.addEventListener('DOMContentLoaded', async () => {
    await fetchEligibleCoupons();
    
    // Check if there's an applied coupon
    const appliedCoupon = '<%= cart.appliedCoupon ? cart.appliedCoupon.name : "" %>';
    const couponDiscount = '<%= cart.couponDiscount || 0 %>';
    
    if (appliedCoupon) {
        // Set dropdown value
        document.getElementById('couponDropdown').value = appliedCoupon;
        document.getElementById('couponDropdown').disabled = true;
        
        // Update button state
        const applyCouponBtn = document.getElementById('applyCouponBtn');
        applyCouponBtn.textContent = 'Remove';
        applyCouponBtn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
        applyCouponBtn.classList.add('bg-red-500', 'hover:bg-red-600');
        
        // Update discount display with stored value
        document.getElementById('couponDiscount').textContent = `-₹${couponDiscount}`;
    }
});

const applyCouponBtn = document.getElementById('applyCouponBtn');
const couponDropdown = document.getElementById('couponDropdown');
const couponFeedback = document.getElementById('couponFeedback');
const couponDiscount = document.getElementById('couponDiscount');
const totalAmount = document.getElementById('totalAmount');

applyCouponBtn.addEventListener('click', async () => {
    if (applyCouponBtn.textContent === 'Remove') {
        try {
            const response = await fetch('/remove-coupon', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const data = await response.json();

            if (!data.success) {
                throw new Error(data.message);
            }

            // Update only coupon-related elements
            document.getElementById('couponDiscount').textContent = '-₹0';
            document.getElementById('totalAmount').textContent = `₹${data.finalAmount}`;
            
            // Reset coupon button state
            applyCouponBtn.textContent = 'Apply';
            applyCouponBtn.classList.remove('bg-red-500', 'hover:bg-red-600');
            applyCouponBtn.classList.add('bg-blue-500', 'hover:bg-blue-600');
            couponDropdown.disabled = false;
            
            showFeedback('Coupon removed successfully!', 'bg-green-500');
            
        } catch (error) {
            console.error('Error:', error);
            showFeedback('Failed to remove coupon', 'bg-red-500');
        }
        return;
    }

    const selectedCoupon = couponDropdown.value;
    if (!selectedCoupon) {
        showFeedback('Please select a coupon!', 'bg-red-500');
        return;
    }

    try {
        const cartTotal = parseFloat(document.getElementById('totalAmount').textContent.replace('₹', ''));
        const response = await fetch('/apply-coupon', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                couponCode: selectedCoupon,
                cartTotal: cartTotal
            })
        });

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.message);
        }

        // Update the discount and total amount displays
        document.getElementById('couponDiscount').textContent = `-₹${data.discountAmount}`;
        document.getElementById('totalAmount').textContent = `₹${data.finalAmount}`;
        
        // Change button to "Remove" and update styling
        applyCouponBtn.textContent = 'Remove';
        applyCouponBtn.classList.remove('bg-blue-500', 'hover:bg-blue-600');
        applyCouponBtn.classList.add('bg-red-500', 'hover:bg-red-600');
        couponDropdown.disabled = true;
        
        showFeedback(`Coupon "${selectedCoupon}" applied successfully!`, 'bg-green-500');

    } catch (error) {
        console.error('Error:', error);
        showFeedback(error.message || 'Failed to apply coupon', 'bg-red-500');
    }
});

function showFeedback(message, colorClass) {
    couponFeedback.textContent = message;
    couponFeedback.className = `mt-4 text-sm rounded-lg p-3 text-white ${colorClass}`;
    couponFeedback.classList.remove('hidden');
    setTimeout(() => {
        couponFeedback.classList.add('hidden');
    }, 3000);
}

function closeModal(modalId) {
  if (modalId === 'quantityModal') {
    closeQuantityModal();
  } else {
    document.getElementById(modalId).classList.add('hidden');
  }
}

function openQuantityModal(itemId, itemSize) {
  currentItemForQuantity = { itemId, itemSize };

  // Fetch stock data for the selected item
  fetch(`/get-stock/${itemId}/${itemSize}`)
    .then((response) => response.json())
    .then((data) => {
      const modal = document.getElementById('quantityModal');
      const buttons = modal.querySelectorAll('.grid button');
      
      // Enable/disable buttons based on stock
      buttons.forEach((button) => {
        const quantity = parseInt(button.textContent);
        if (quantity > data.stock) {
          button.disabled = true;
          button.title = 'Not enough stock available';
        } else {
          button.disabled = false;
          button.title = '';
        }
      });

      modal.classList.remove('hidden');
    })
    .catch((error) => {
      console.error('Error fetching stock:', error);
      alert('Error checking stock availability. Please try again.');
    });
}

function updateQuantity(selectedQuantity) {
  if (currentItemForQuantity) {
    const { itemId, itemSize } = currentItemForQuantity;
    fetch('/update-cart-quantity', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ itemId, itemSize, quantity: selectedQuantity }),
    })
      .then((response) => response.json())
      .then((data) => {
        if (data.success) {
          // Update quantity display
          const quantityDisplayElement = document.querySelector(
            `#quantity-display-${itemId}-${itemSize}`
          );
          if (quantityDisplayElement) {
            quantityDisplayElement.textContent = selectedQuantity;
          }

          // Update prices
          const totalPriceElement = document.querySelector(
            `#total-price-display-${itemId}-${itemSize}`
          );
          if (totalPriceElement) {
            totalPriceElement.textContent = `₹${data.totalPrice}`;
          }

          const regularPriceElement = document.querySelector(
            `#regular-price-display-${itemId}-${itemSize}`
          );
          if (regularPriceElement) {
            regularPriceElement.textContent = `₹${data.regularPrice * selectedQuantity}`;
          }

          // Update cart totals
          document.querySelector("#totalMRP").textContent = `₹${data.totalMRP}`;
          document.querySelector("#discountOnMRP").textContent = `-₹${data.discountOnMRP}`;
          document.querySelector("#totalAmount").textContent = `₹${data.finalAmount}`;

          // Close modal after successful update
          closeQuantityModal();
        } else {
          alert(data.message || 'Error updating quantity');
        }
      })
      .catch((error) => {
        console.error('Error updating quantity:', error);
        alert('Error updating quantity. Please try again.');
      });
  }
}

// Function to handle the click on the trash icon
function removeItem(productId, size) {
  itemToRemove = { productId, size };

  // Show the modal and update the modal text with item details
  const modal = document.getElementById("removeItemModal");
  const modalDetails = document.getElementById("modalItemDetails");
  modalDetails.textContent = `Are you sure you want to remove the item with size "${size}" from the cart?`;
  modal.classList.remove("hidden");
}

async function confirmRemove() {
  if (itemToRemove) {
    try {
      const response = await fetch("/cart/remove", {
        method: "DELETE",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          productId: itemToRemove.productId,
          size: itemToRemove.size,
        }),
      });

      const result = await response.json();

      if (response.ok) {
          location.reload()
      } else {
        showSmallNotification("Failed to remove item from cart.", "error");
      }
    } catch (error) {
      console.error("Error:", error);
      showSmallNotification("An error occurred. Try again!", "error");
    } finally {
      itemToRemove = null;
      closeModal();
    }
  }
}

// Function to close the modal
function closeModal() {
  const modal = document.getElementById("removeItemModal");
  modal.classList.add("hidden");
}

// Attach the confirmRemove function to the remove button in the modal
document.getElementById("confirmRemoveBtn").onclick = confirmRemove;

function showSmallNotification(message, type = "success") {
  const notification = document.createElement("div");
  notification.className = `notification-container ${type}`;
  notification.textContent = message;

  document.body.appendChild(notification);
  setTimeout(() => notification.classList.add("show"), 10);

  // Remove the notification after 2 seconds
  setTimeout(() => {
    notification.classList.remove("show");
    setTimeout(() => notification.remove(), 300);
  }, 2000);
}

function closeQuantityModal() {
  document.getElementById('quantityModal').classList.add('hidden');
  currentItemForQuantity = null; // Reset the current item
}

</script>
</div>
</div>


<%- include('../partials/user/userfooter') %> 