<%- include('../partials/user/userheader') %> 

<style>
.zoom-container {
  position: relative;
  overflow: hidden;
  cursor: zoom-in;
  width: 100%; /* Ensure full width */
  height: 100%; /* Ensure full height */
}

.zoom-image {
  transition: transform 0.1s ease;
  transform-origin: center center;
  width: 100%;
  height: auto;
  object-fit: cover;
}

.zoom-container:hover .zoom-image {
  transform: scale(2); /* Increased zoom level */
}
/* Custom toast styles */
.custom-toast-success {
  background-color: #28a745 !important;  /* Green background for success */
  color: white !important;  /* White text color */
  border-radius: 8px;
  padding: 8px 16px;  /* Adjust padding for width and height */
  max-width: 350px;  /* Set a max width */
  font-size: 14px;  /* Adjust font size */
  min-height: 40px;  /* Min height */
  width: auto;
}

/* Custom styling for the warning toast */
.custom-toast-warning {
  background-color: #f8d7da !important;  /* Light red background for warning */
  color: #721c24 !important;  /* Dark red text color */
  border-radius: 8px;
  padding: 8px 16px;
  max-width: 350px;
  font-size: 14px;
  min-height: 40px;
  width: auto;
}

/* Custom styling for the error toast */
.custom-toast-error {
  background-color: #dc3545 !important;  /* Red background for error */
  color: white !important;  /* White text color */
  border-radius: 8px;
  padding: 8px 16px;
  max-width: 350px;
  font-size: 14px;
  min-height: 40px;
  width: auto;
}

/* Custom positioning for the toast */
.swal2-container {
  top: 70px !important; /* Adjust this value to move the toast lower */
}

.animate-fade-in {
  animation: fadeIn 0.3s ease-in-out;
}

@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

</style>


<div class="container mx-auto px-4 pt-8">
  <nav class="mb-2" aria-label="Breadcrumb">
    <ul class="flex items-center space-x-2 text-sm text-gray-600">
      <li><a href="/" class="hover:text-blue-600 transition">Home</a></li>
      <li><span class="mx-2">→</span></li>
      <li><a href="/shop" class="hover:text-blue-600 transition">Shop</a></li>
      <li><span class="mx-2">→</span></li>
      <li><span class="text-gray-900 font-medium"><%= product.productName %></span></li>
    </ul>
   </nav>
  <!-- Product Layout -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-8 bg-white shadow-lg rounded-lg overflow-hidden">  
    <!-- Left Section: Images -->
    <div class="p-6 flex">
      <!-- Thumbnails -->
      <div class="flex flex-col gap-4 mr-4">
        <% product.productImage.forEach((image, index) => { %>
        <img src="<%= image %>" alt="Thumbnail <%= index + 1 %>" class="w-20 h-20 object-cover rounded-lg border border-gray-300 cursor-pointer" onclick="document.getElementById('main-image').src=this.src"/>
        <% }) %>
      </div>

      <!-- Main Product Image with Zoom Effect -->
      <div class="zoom-container w-full h-full">
        <img id="main-image" src="<%= product.productImage[0] %>" alt="<%= product.productName %>" class="zoom-image w-full h-auto object-cover rounded-lg border border-gray-300"/>
      </div>
    </div>

    <!-- Right Section: Product Details -->
    <div class="p-6 flex flex-col justify-between">
      <!-- Product Title -->
      <h1 class="text-4xl font-extrabold text-gray-900 mb-2 "><%= product.productName %></h1>

      <!-- Rating -->
      <div class="flex items-center space-x-2 text-yellow-400  mb-2">
        <div class="flex space-x-1">
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star-half-alt"></i>
        </div>
        <div class="flex items-center space-x-1">
          <span class=" text-gray-600">4.2</span>
        </div>
      </div>

      <!-- Price -->
      <div class="mb-2">
        <p class="text-lg font-semibold text-gray-500 line-through">₹<%= product.regularPrice %></p>
        <div class="flex items-center space-x-2">
          <p class="text-2xl font-semibold text-blue-600">₹<%= product.finalPrice %></p>
          <span class="text-sm font-medium text-green-600">
            <%= Math.round((product.regularPrice - product.finalPrice) / product.regularPrice * 100) %>% OFF
          </span>
        </div>
        
        <% if (product.offer) { %>
            <div class="mt-2 p-2 bg-yellow-50 rounded-lg border border-yellow-200">
                <p class="text-sm text-yellow-800">
                    <span class="font-semibold">Special Offer:</span> 
                    <%= product.offer.percentage %>% off 
                    on <%= product.offer.offerType.toLowerCase() %>
                </p>
            </div>
        <% } %>
      </div>
      
      <!-- Size Selection -->
   <!-- Size Selection Section -->
   <!-- Size Selection Section -->
   <div class="mb-4">
    <h3 class="text-sm font-semibold text-gray-700 mb-2">Size</h3>
    <div class="flex flex-wrap gap-4">
      <% const sizes = ['S', 'M', 'L', 'XL']; %>
      <% sizes.forEach(size => { %>
        <% const quantity = product.stock[size] || 0; %>
        <% const isDisabled = quantity === 0; %>
        <div class="text-center">
          <button 
            class="size-btn px-4 py-2 w-12 h-12 text-lg font-medium rounded-full border transition-all duration-300 ease-in-out 
              <% if (isDisabled) { %> bg-gray-200 text-gray-500 border-gray-300 cursor-not-allowed 
              <% } else { %> bg-white text-gray-800 border-gray-300 hover:border-gray-400 hover:bg-gray-100 <% } %>"
            <% if (!isDisabled) { %> data-size="<%= size %>" data-saleprice="<%= product.salePrice %>" <% } %>
            <% if (isDisabled) { %> disabled <% } %>
          >
            <%= size %>
          </button>
          <% if (quantity > 0 && quantity < 5) { %>
            <p class="text-xs text-red-500 mt-1 font-medium">Only <%= quantity %> left!</p>
          <% } else if (quantity >= 5 && quantity < 10) { %>
            <p class="text-xs text-yellow-500 mt-1 font-medium">Few left!</p>
          <% } %>
        </div>
      <% }) %>
    </div>
    <a href="#" class="text-sm text-blue-600 mt-2 inline-block hover:underline">Size Guide</a>
  </div>
  
      <!-- out of stock -->
      <% if (product.status === "out of stock") { %>
        <div class="status text-red-600 font-semibold">
          <p>Out of Stock</p>
        </div>
      <% } %>

      <!-- Add to Cart and Wishlist -->
      <div class="flex items-center gap-4 mb-2">
        <button id="addToCartButton" data-product-id="<%= product._id %>" class="w-full bg-blue-600 text-white text-sm font-medium px-6 py-3 rounded-lg hover:bg-blue-700 focus:outline-none">
          Add to Cart
        </button>
        
        <button id="wishlistButton" 
          data-product-id="<%= product._id %>" 
          class="w-full bg-gray-100 text-gray-600 text-sm font-medium px-6 py-3 rounded-lg hover:bg-gray-200 focus:outline-none flex items-center justify-center gap-2">
          <i class="fas fa-heart" id="heartIcon"></i>
          <span id="wishlistButtonText">Add to Wishlist</span>
        </button>
      </div>

      <!-- Enhanced Product Description -->
      <div class="border-t border-gray-100 pt-2 mt-2">
        <div class="bg-white rounded-xl p-4">
          <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
            <i class="fas fa-info-circle mr-2 text-blue-600"></i>
            Product Details
          </h3>
          
          <div class="prose max-w-none">
            <p class="text-gray-600 leading-relaxed">
              <%= product.description %>
            </p>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Enhanced Reviews Section -->
  <div class="mt-16 bg-white rounded-2xl shadow-sm p-8">
    <h2 class="text-2xl font-bold text-gray-900 mb-8">Customer Reviews</h2>

    <!-- Review Statistics with Product Image -->
    <div class="grid grid-cols-1 md:grid-cols-12 gap-8 mb-12">
      <!-- Product Image -->
      <div class="md:col-span-3">
        <div class="aspect-square rounded-lg overflow-hidden border border-gray-300">
          <img 
            src="<%= product.productImage[2] %>" 
            alt="<%= product.productName %>" 
            class="w-full h-full object-cover"
          />
        </div>
      </div>

      <!-- Rating Statistics -->
      <div class="md:col-span-9 flex items-center bg-gray-50 rounded-xl p-6">
        <!-- Overall Rating -->
        <div class="flex flex-col items-center pr-6 border-r border-gray-200">
          <h3 class="text-5xl font-bold text-gray-900">4.5</h3>
          <div class="flex justify-center text-yellow-400 my-2">
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star"></i>
            <i class="fas fa-star-half-alt"></i>
          </div>
          <p class="text-gray-500 text-sm">128 reviews</p>
        </div>

        <!-- Rating Distribution -->
        <div class="flex-1 pl-4">
          <div class="space-y-2">
            <% [5,4,3,2,1].forEach(stars => { %>
              <div class="flex items-center gap-3">
                <div class="w-8 text-right">
                  <div class="flex items-center justify-end">
                    <span class="text-sm font-medium text-gray-600"><%= stars %></span>
                    <i class="fas fa-star text-yellow-400 text-xs ml-1"></i>
                  </div>
                </div>
                <div class="flex-1">
                  <div class="h-2 rounded-full bg-gray-200 overflow-hidden">
                    <div class="h-full rounded-full bg-yellow-400 transition-all" 
                         style="width: <%= Math.random() * 100 %>%"></div>
                  </div>
                </div>
                <div class="w-8 text-right">
                  <span class="text-xs text-gray-600"><%= Math.floor(Math.random() * 50) %></span>
                </div>
              </div>
            <% }) %>
          </div>
        </div>
      </div>
    </div>

    <!-- Individual Reviews -->
    <div class="space-y-6">
      <% [[4.5, 'John Doe'], [4.0, 'Jane Smith']].forEach(([rating, name]) => { %>
        <div class="border border-gray-100 rounded-xl p-5 hover:shadow-sm transition-shadow">
          <div class="flex items-start space-x-4">
            <!-- User Avatar -->
            <div class="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-blue-600 flex items-center justify-center text-white font-medium">
              <%= name[0] %>
            </div>

            <!-- Review Content -->
            <div class="flex-1">
              <!-- User Info and Rating -->
              <div class="flex items-center justify-between mb-3">
                <div>
                  <h4 class="font-medium text-gray-900"><%= name %></h4>
                  <div class="flex items-center mt-1 space-x-3">
                    <div class="flex text-yellow-400">
                      <% Array(Math.floor(rating)).fill().forEach(() => { %>
                        <i class="fas fa-star text-xs"></i>
                      <% }) %>
                      <% if(rating % 1 !== 0) { %>
                        <i class="fas fa-star-half-alt text-xs"></i>
                      <% } %>
                    </div>
                    <span class="text-xs text-gray-400">3 days ago</span>
                  </div>
                </div>
                
                <!-- Size Info -->
                <div class="text-xs text-gray-500 bg-gray-50 px-3 py-1 rounded-full">
                  Size: M
                </div>
              </div>

              <!-- Review Text -->
              <p class="text-gray-600 text-sm leading-relaxed">
                Great product! The fabric is soft, and the fit is perfect. Would definitely buy again!
                The quality is exceptional and worth every penny.
              </p>
            </div>
          </div>
        </div>
      <% }) %>

      <!-- Load More Button -->
      <div class="text-center mt-8">
        <button class="px-8 py-3 border border-gray-200 rounded-lg text-gray-600 hover:bg-gray-50 transition text-sm font-medium">
          Show More Reviews
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Similar Products Section -->
<div class="px-4">
  <h2 class="text-3xl font-extrabold text-gray-900 mb-6">Similar Products</h2>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 mb-6">
    <% similarProducts.forEach(similarProduct => { %>
      <div class="bg-white shadow-lg rounded-lg overflow-hidden transform hover:scale-105 transition duration-300 ease-in-out">
        <img src="<%= similarProduct.productImage[0] %>" alt="<%= similarProduct.productName %>" class="w-full object-cover rounded-t-lg">
        <div class="p-4">
          <h3 class="text-sm font-semibold text-gray-800"><%= similarProduct.productName %></h3>
          <p class="text-blue-600 font-semibold">₹<%= similarProduct.salePrice || similarProduct.regularPrice %></p>
          <a href="/productDetails?id=<%= similarProduct._id %>" class="text-blue-600 hover:underline">View Details</a>
        </div>
      </div>
    <% }) %>
  </div>
</div>

<script>
  async function  updatePrice(size) {
    const productId = window.location.pathname.split('/').pop();

    try {
        const response = await fetch('/getPrice', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, size }),
        });

        const data = await response.json();
        if (response.ok) {
            document.getElementById('product-price').textContent = `₹${data.price}`;
        } else {
            alert(data.error || 'Failed to fetch price');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred');
    }
}

let selectedSize = null; // Track the selected size
const sizeButtons = document.querySelectorAll('.size-btn');
// Update size selection when a size button is clicked
sizeButtons.forEach(button => {
  button.addEventListener('click', () => {
    // Remove selected class from all buttons
    sizeButtons.forEach(btn => btn.classList.remove('selected'));
    // Add selected class to clicked button
    button.classList.add('selected');

    // Your existing size selection code remains unchanged
    selectedSize = button.getAttribute('data-size');
  });
});
document.getElementById('addToCartButton').addEventListener('click', async function() {
    if (!selectedSize) {
        // Size selection warning at the top
        Toastify({
            text: "Please select a size",
            duration: 3000,
            gravity: "top",     // Changed from "bottom" to "top"
            position: "right", 
            style: {
                background: "#dc3545", // Changed to red
                color: "#ffffff",
                borderRadius: "8px",
                padding: "12px 24px",
                marginTop: "60px"  // Added margin to prevent header overlap
            }
        }).showToast();
        return;
    }

    const productId = this.dataset.productId;
    const quantity = 1;

    try {
        const response = await fetch('/addToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, quantity, selectedSize }),
        });

        const data = await response.json();

        if (response.ok) {
            // Success message at the top
            Toastify({
                text: data.message,
                duration: 3000,
                gravity: "top",     // Changed from "bottom" to "top"
                position: "right",
                style: {
                    background: "#000000",
                    color: "#ffffff",
                    borderRadius: "8px",
                    padding: "12px 24px",
                    marginTop: "60px"  // Added margin to prevent header overlap
                }
            }).showToast();

            // Update cart count if needed
            const cartCountElement = document.querySelector('.cart-count');
            if (cartCountElement && data.cartCount) {
                cartCountElement.textContent = data.cartCount;
            }
        } else {
            // Error message at the top
            Toastify({
                text: data.message,
                duration: 3000,
                gravity: "top",     // Changed from "bottom" to "top"
                position: "right",
                style: {
                    background:  "#dc3545",
                    color: "#ffffff",
                    borderRadius: "8px",
                    padding: "12px 24px",
                    marginTop: "60px"  // Added margin to prevent header overlap
                }
            }).showToast();
        }
    } catch (error) {
        console.error("Error adding to cart:", error);
        // Error message at the top
        Toastify({
            text: "Failed to add the product to cart",
            duration: 3000,
            gravity: "top",     // Changed from "bottom" to "top"
            position: "right",
            style: {
                background: "#dc3545",
                color: "#ffffff",
                borderRadius: "8px",
                padding: "12px 24px",
                marginTop: "60px"  // Added margin to prevent header overlap
            }
        }).showToast();
    }
});




// Select all size buttons and the price element

const priceElement = document.querySelector('.text-2xl.font-semibold.text-blue-600');

sizeButtons.forEach(button => {
  button.addEventListener('click', () => {
    // Get size and sale price from the data attributes
    const selectedSize = button.getAttribute('data-size');
  

    // Update the yellow border for the selected size
    sizeButtons.forEach(btn => btn.classList.remove('border-yellow-500')); // Remove yellow border from all
    button.classList.add('border-yellow-500'); // Add yellow border to the selected button
  });
});



document.addEventListener('DOMContentLoaded', () => {
  const zoomContainer = document.querySelector('.zoom-container');
  const zoomImage = zoomContainer.querySelector('.zoom-image');

  zoomContainer.addEventListener('mousemove', (e) => {
    const rect = zoomContainer.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    
    zoomImage.style.transformOrigin = `${x}% ${y}%`;
  });

  zoomContainer.addEventListener('mouseenter', () => {
    zoomImage.style.transform = 'scale(2)';
  });

  zoomContainer.addEventListener('mouseleave', () => {
    zoomImage.style.transform = 'scale(1)';
    zoomImage.style.transformOrigin = 'center center';
  });
});

document.addEventListener('DOMContentLoaded', async function() {
  const wishlistButton = document.getElementById('wishlistButton');
  const heartIcon = document.getElementById('heartIcon');
  const wishlistButtonText = document.getElementById('wishlistButtonText');
  const wishlistMessage = document.getElementById('wishlistMessage');
  const productId = wishlistButton.dataset.productId;

  // Check if product is in wishlist
  try {
    const response = await fetch(`/check-wishlist/${productId}`);
    const data = await response.json();
    
    if (data.inWishlist) {
      heartIcon.classList.add('text-red-500');
      wishlistButtonText.textContent = 'Remove from Wishlist';
    }
  } catch (error) {
    console.error('Error checking wishlist status:', error);
  }

  wishlistButton.addEventListener('click', async function() {
    try {
      const response = await fetch('/wishlist/toggle', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ productId })
      });

      const data = await response.json();

      if (data.success) {
        if (data.message.includes('Added')) {
          // Product was added to wishlist
          heartIcon.classList.add('text-red-500');
          wishlistButtonText.textContent = 'Remove from Wishlist';
          showWishlistMessage('Product added to wishlist!', 'success');
        } else {
          // Product was removed from wishlist
          heartIcon.classList.remove('text-red-500');
          wishlistButtonText.textContent = 'Add to Wishlist';
          showWishlistMessage('Product removed from wishlist!', 'info');
        }
      } else {
        if (data.message.includes('already in wishlist')) {
          showWishlistMessage('This product is already in your wishlist!', 'warning');
        } else {
          throw new Error(data.message);
        }
      }
    } catch (error) {
      console.error('Error:', error);
      showWishlistMessage('Something went wrong. Please try again.', 'error');
    }
  });

  function showWishlistMessage(message, type) {
    wishlistMessage.textContent = message;
    wishlistMessage.className = 'mt-2 text-sm text-center animate-fade-in';
    
    // Add appropriate color classes based on message type
    switch(type) {
      case 'success':
        wishlistMessage.classList.add('text-green-600');
        break;
      case 'warning':
        wishlistMessage.classList.add('text-yellow-600');
        break;
      case 'error':
        wishlistMessage.classList.add('text-red-600');
        break;
      case 'info':
        wishlistMessage.classList.add('text-blue-600');
        break;
    }
    
    wishlistMessage.classList.remove('hidden');
    
    // Hide message after 3 seconds
    setTimeout(() => {
      wishlistMessage.classList.add('hidden');
    }, 3000);
  }
});

document.addEventListener('DOMContentLoaded', function() {
    const sizeButtons = document.querySelectorAll('.size-btn');
    const priceElement = document.querySelector('.product-price');
    
    // Store the offer price when page loads
    const offerPrice = parseFloat(priceElement.getAttribute('data-offer-price'));
    const regularPrice = parseFloat(priceElement.getAttribute('data-regular-price'));
    
    // Initialize the display with offer price
    priceElement.textContent = `₹${offerPrice}`;
    
    sizeButtons.forEach(button => {
        button.addEventListener('click', async () => {
            // Remove selected class from all buttons
            sizeButtons.forEach(btn => btn.classList.remove('border-yellow-500'));
            
            // Add selected class to clicked button
            button.classList.add('border-yellow-500');
            
            // Update selected size
            selectedSize = button.getAttribute('data-size');
            
            // Always maintain the offer price
            priceElement.textContent = `₹${offerPrice}`;
            
            // Update any other price-related elements if they exist
            const discountElement = document.querySelector('.discount-percentage');
            if (discountElement) {
                const discountPercentage = Math.round((regularPrice - offerPrice) / regularPrice * 100);
                discountElement.textContent = `${discountPercentage}% OFF`;
            }
        });
    });
});

</script> 


<%- include('../partials/user/userfooter') %> 