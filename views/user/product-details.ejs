<%- include('../partials/user/userheader') %> 

<style>
.zoom-container {
  position: relative;
  overflow: hidden;
  cursor: zoom-in;
  width: 100%; /* Ensure full width */
  height: 100%; /* Ensure full height */
}

.zoom-image {
  transition: transform 0.1s ease;
  transform-origin: center center;
  width: 100%;
  height: auto;
  object-fit: cover;
}

.zoom-container:hover .zoom-image {
  transform: scale(2); /* Increased zoom level */
}
/* Custom toast styles */
.custom-toast-success {
  background-color: #28a745 !important;  /* Green background for success */
  color: white !important;  /* White text color */
  border-radius: 8px;
  padding: 8px 16px;  /* Adjust padding for width and height */
  max-width: 350px;  /* Set a max width */
  font-size: 14px;  /* Adjust font size */
  min-height: 40px;  /* Min height */
  width: auto;
}

/* Custom styling for the warning toast */
.custom-toast-warning {
  background-color: #f8d7da !important;  /* Light red background for warning */
  color: #721c24 !important;  /* Dark red text color */
  border-radius: 8px;
  padding: 8px 16px;
  max-width: 350px;
  font-size: 14px;
  min-height: 40px;
  width: auto;
}

/* Custom styling for the error toast */
.custom-toast-error {
  background-color: #dc3545 !important;  /* Red background for error */
  color: white !important;  /* White text color */
  border-radius: 8px;
  padding: 8px 16px;
  max-width: 350px;
  font-size: 14px;
  min-height: 40px;
  width: auto;
}

/* Custom positioning for the toast */
.swal2-container {
  top: 70px !important; /* Adjust this value to move the toast lower */
}


</style>

<div class="container mx-auto p-8 space-y-12">
  <!-- Product Layout -->
  <div class="grid grid-cols-1 md:grid-cols-2 gap-8 bg-white shadow-lg rounded-lg overflow-hidden">
    
    <!-- Left Section: Images -->
    <div class="p-6 flex">
      <!-- Thumbnails -->
      <div class="flex flex-col gap-4 mr-4">
        <% product.productImage.forEach((image, index) => { %>
        <img src="<%= image %>" alt="Thumbnail <%= index + 1 %>" class="w-20 h-20 object-cover rounded-lg border border-gray-300 cursor-pointer" onclick="document.getElementById('main-image').src=this.src"/>
        <% }) %>
      </div>

      <!-- Main Product Image with Zoom Effect -->
      <div class="zoom-container w-full h-full">
        <img id="main-image" src="<%= product.productImage[0] %>" alt="<%= product.productName %>" class="zoom-image w-full h-auto object-cover rounded-lg border border-gray-300"/>
      </div>
    </div>

    <!-- Right Section: Product Details -->
    <div class="p-6 flex flex-col justify-between">
      <!-- Product Title -->
      <h1 class="text-4xl font-extrabold text-gray-900 "><%= product.productName %></h1>

      <!-- Rating -->
      <div class="flex items-center space-x-2 text-yellow-400 ">
        <div class="flex space-x-1">
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star-half-alt"></i>
        </div>
        <div class="flex items-center space-x-1">
          <span class=" text-gray-600">4.2</span>
        </div>
      </div>

      <!-- Price -->
      <div class="mb-2">
        <p class="text-lg font-semibold text-gray-500 line-through">₹<%= product.regularPrice %></p>
        <div class="flex items-center space-x-2">
          <p class="text-2xl font-semibold text-blue-600">₹<%= product.salePrice %></p>
          <span class="text-lg text-red-600 font-semibold">70% OFF</span>
        </div>
      </div>
      
      <!-- Size Selection -->
   <!-- Size Selection Section -->
   <!-- Size Selection Section -->
   <div class="mb-4">
    <h3 class="text-sm font-semibold text-gray-700 mb-2">Size</h3>
    <div class="flex flex-wrap gap-4">
      <% const sizes = ['S', 'M', 'L', 'XL']; %>
      <% sizes.forEach(size => { %>
        <% const quantity = product.stock[size] || 0; %>
        <% const isDisabled = quantity === 0; %>
        <div class="text-center">
          <button 
            class="size-btn px-4 py-2 w-12 h-12 text-lg font-medium rounded-full border transition-all duration-300 ease-in-out 
              <% if (isDisabled) { %> bg-gray-200 text-gray-500 border-gray-300 cursor-not-allowed 
              <% } else { %> bg-white text-gray-800 border-gray-300 hover:border-gray-400 hover:bg-gray-100 <% } %>"
            <% if (!isDisabled) { %> data-size="<%= size %>" data-saleprice="<%= product.salePrice %>" data-regularprice="<%= product.regularPrice %>" <% } %>
            <% if (isDisabled) { %> disabled <% } %>
          >
            <%= size %>
          </button>
          <% if (quantity > 0 && quantity < 5) { %>
            <p class="text-xs text-red-500 mt-1 font-medium">Only <%= quantity %> left!</p>
          <% } else if (quantity >= 5 && quantity < 10) { %>
            <p class="text-xs text-yellow-500 mt-1 font-medium">Few left!</p>
          <% } %>
        </div>
      <% }) %>
    </div>
    <a href="#" class="text-sm text-blue-600 mt-2 inline-block hover:underline">Size Guide</a>
  </div>
  


      <!-- Add to Cart and Wishlist -->
      <div class="flex items-center gap-4 mb-2">
        <button id="addToCartButton" data-product-id="<%= product._id %>" class="w-full bg-blue-600 text-white text-sm font-medium px-6 py-3 rounded-lg hover:bg-blue-700 focus:outline-none">
          Add to Cart
        </button>
        
        <button class="w-full bg-gray-100 text-gray-600 text-sm font-medium px-6 py-3 rounded-lg hover:bg-gray-200 focus:outline-none">Wishlist</button>
      </div>

      <!-- Description -->
      <div>
        <h3 class="text-sm font-semibold text-gray-800 mb-2">Description</h3>
        <p class="text-sm text-gray-600">
          <%= product. description %>
        </p>
      </div>
    </div>
  </div>

  <!-- Reviews Section -->
  <div class="mt-8 bg-gray-50 p-6 rounded-lg shadow-lg">
    <h2 class="text-2xl font-semibold text-gray-900 mb-4">User Reviews</h2>
    
    <!-- Example Review -->
    <div class="border-t border-gray-300 pt-4 mt-4">
      <div class="flex items-center space-x-2 text-yellow-400">
        <div class="flex space-x-1">
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="far fa-star"></i>
        </div>
        <span class="text-sm text-gray-600">(4.5)</span>
      </div>
      <p class="text-sm text-gray-600 mt-2">Great product! The fabric is soft, and the fit is perfect. Would definitely buy again!</p>
      <div class="text-sm text-gray-500 mt-2">By John Doe, 3 days ago</div>
    </div>
    <!-- Example Review -->
    <div class="border-t border-gray-300 pt-4 mt-4">
      <div class="flex items-center space-x-2 text-yellow-400">
        <div class="flex space-x-1">
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star"></i>
          <i class="fas fa-star-half-alt"></i>
          <i class="far fa-star"></i>
        </div>
        <span class="text-sm text-gray-600">(4.0)</span>
      </div>
      <p class="text-sm text-gray-600 mt-2">Good quality, but the size runs a bit small. Still a solid choice!</p>
      <div class="text-sm text-gray-500 mt-2">By Jane Smith, 1 week ago</div>
    </div>
  </div>
</div>

<!-- Similar Products Section -->
<div>
  <h2 class="text-3xl font-extrabold text-gray-900 mb-6">Similar Products</h2>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8 mb-6">
    <!-- Product 1 -->
    <div class="bg-white shadow-lg rounded-lg overflow-hidden transform hover:scale-105 transition duration-300 ease-in-out">
      <img src="https://via.placeholder.com/200" alt="Product 1" class="w-full object-cover rounded-t-lg">
      <div class="p-4">
        <h3 class="text-sm font-semibold text-gray-800">Product Name 1</h3>
        <p class="text-blue-600 font-semibold">$39.99</p>
      </div>
    </div>
    <!-- Product 2 -->
    <div class="bg-white shadow-lg rounded-lg overflow-hidden transform hover:scale-105 transition duration-300 ease-in-out">
      <img src="https://via.placeholder.com/200" alt="Product 2" class="w-full object-cover rounded-t-lg">
      <div class="p-4">
        <h3 class="text-sm font-semibold text-gray-800">Product Name 2</h3>
        <p class="text-blue-600 font-semibold">$49.99</p>
      </div>
    </div>
    <!-- Product 3 -->
    <div class="bg-white shadow-lg rounded-lg overflow-hidden transform hover:scale-105 transition duration-300 ease-in-out">
      <img src="https://via.placeholder.com/200" alt="Product 3" class="w-full object-cover rounded-t-lg">
      <div class="p-4">
        <h3 class="text-sm font-semibold text-gray-800">Product Name 3</h3>
        <p class="text-blue-600 font-semibold">$29.99</p>
      </div>
    </div>
    <!-- Product 4 -->
    <div class="bg-white shadow-lg rounded-lg overflow-hidden transform hover:scale-105 transition duration-300 ease-in-out">
      <img src="https://via.placeholder.com/200" alt="Product 4" class="w-full object-cover rounded-t-lg">
      <div class="p-4">
        <h3 class="text-sm font-semibold text-gray-800">Product Name 4</h3>
        <p class="text-blue-600 font-semibold">$59.99</p>
      </div>
    </div>
  </div>
</div>

<script>
  async function  updatePrice(size) {
    const productId = window.location.pathname.split('/').pop();

    try {
        const response = await fetch('/getPrice', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId, size }),
        });

        const data = await response.json();
        if (response.ok) {
            document.getElementById('product-price').textContent = `₹${data.price}`;
        } else {
            alert(data.error || 'Failed to fetch price');
        }
    } catch (error) {
        console.error('Error:', error);
        alert('An error occurred');
    }
}

let selectedSize = null; // Track the selected size
const sizeButtons = document.querySelectorAll('.size-btn');
// Update size selection when a size button is clicked
sizeButtons.forEach(button => {
  button.addEventListener('click', () => {
    selectedSize = button.getAttribute('data-size');

    // Highlight the selected button
    sizeButtons.forEach(btn => btn.classList.remove('border-blue-500', 'bg-blue-100'));
    button.classList.add('border-blue-500', 'bg-blue-100');
  });
});
document.getElementById('addToCartButton').addEventListener('click', function() {
  if (!selectedSize) {
    Swal.fire({
      title: "Don't forget to pick your size before adding this to your cart.",
      position: 'top-right',  // Position at the top-right (centered horizontally)
      toast: true,  // Makes it behave like a toast
      showConfirmButton: false,  // Hides the "OK" button
      timer: 3000,  // Duration in milliseconds before it hides
      timerProgressBar: true,  // Shows a progress bar during the timer
      customClass: {
        popup: 'custom-toast-warning' // Custom class for warning toast
      },
      background: '#f8d7da',  // Light red background for warning
      color: '#721c24',  // Dark red text color
    });
    return;
  }

  const productId = this.dataset.productId; 
  const quantity = 1; 

  fetch('/addToCart', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ productId, quantity, selectedSize }),
  })
  .then(response => {
    if (response.status === 400) {
      return response.text().then(message => {
        Swal.fire({
          title: message,
          position: 'top-right',  // Position at the top-right (centered horizontally)
          showConfirmButton: false,
          timer: 3000,
          toast: true,
          customClass: {
            popup: 'custom-toast-error'  // Apply custom class for error message
          },
          background: '#dc3545',  // Red background for error
          color: '#ffffff'  // White text color
        });
      });
    } else {
      return response.text().then(message => {
        Swal.fire({
          title: message,
          position: 'top-right',  // Position at the top-right (centered horizontally)
          showConfirmButton: false,
          timer: 3000,
          toast: true,
          customClass: {
            popup: 'custom-toast-success'  // Apply custom class for success message
          },
          background: '#28a745',  // Green background for success
          color: '#ffffff'  // White text color
        });
      });
    }
  })
  .catch(error => {
    console.error("Error adding to cart:", error);
    Swal.fire({
      title: 'Error!',
      text: 'Failed to add the product to the cart. Please try again.',
      position: 'top-right',  // Position at the top-right (centered horizontally)
      showConfirmButton: false,
      timer: 3000,
      toast: true,
      customClass: {
        popup: 'custom-toast-error'  // Apply custom class for error message
      },
      background: '#dc3545',  // Red background for error
      color: '#ffffff'  // White text color
    });
  });
});




// Select all size buttons and the price element

const priceElement = document.querySelector('.text-2xl.font-semibold.text-blue-600');

sizeButtons.forEach(button => {
  button.addEventListener('click', () => {
    // Get size, sale price, and regular price from the data attributes
    const selectedSize = button.getAttribute('data-size');
    const salePrice = parseFloat(button.getAttribute('data-saleprice'));
    const regularPrice = parseFloat(button.getAttribute('data-regularprice'));

    // Calculate the price based on the selected size
    let finalPrice;
if (selectedSize === 'L' || selectedSize === 'XL') {
    finalPrice = Math.round(salePrice + 0.1 * regularPrice); // Add 10% of regular price
} else {
    finalPrice = salePrice; // Use sale price for S and M
}

// Update the price element without decimals
priceElement.textContent = `₹${finalPrice.toFixed(0)}`; // Ensures no decimals


    // Update the yellow border for the selected size
    sizeButtons.forEach(btn => btn.classList.remove('border-yellow-500')); // Remove yellow border from all
    button.classList.add('border-yellow-500'); // Add yellow border to the selected button
  });
});



document.addEventListener('DOMContentLoaded', () => {
  const zoomContainer = document.querySelector('.zoom-container');
  const zoomImage = zoomContainer.querySelector('.zoom-image');

  zoomContainer.addEventListener('mousemove', (e) => {
    const rect = zoomContainer.getBoundingClientRect();
    const x = ((e.clientX - rect.left) / rect.width) * 100;
    const y = ((e.clientY - rect.top) / rect.height) * 100;
    
    zoomImage.style.transformOrigin = `${x}% ${y}%`;
  });

  zoomContainer.addEventListener('mouseenter', () => {
    zoomImage.style.transform = 'scale(2)';
  });

  zoomContainer.addEventListener('mouseleave', () => {
    zoomImage.style.transform = 'scale(1)';
    zoomImage.style.transformOrigin = 'center center';
  });
});


</script> 


<%- include('../partials/user/userfooter') %> 